Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Duplicate),Inward issue link (Reference),Outward issue link (Reference),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Affects version (Component)),Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Evidence Of Open Source Adoption),Custom field (Evidence Of Registration),Custom field (Evidence Of Use On World Wide Web),Custom field (Existing GitBox Approval),Custom field (External issue URL),Custom field (Fix version (Component)),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Language),Custom field (Last public comment date),Custom field (Level of effort),Custom field (Machine Readable Info),Custom field (Mentor),Custom field (New-TLP-TLPName),Custom field (Original story points),Custom field (Parent Link),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Review Date),Custom field (Reviewer),Custom field (Severity),Custom field (Severity),Custom field (Skill Level),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Start Date),Custom field (Tags),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Test and Documentation Plan),Custom field (Testcase included),Custom field (Tester),Custom field (Workaround),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
NullPointerException in PDTrueTypeFont.java getPath( ),PDFBOX-5587,13532545,Bug,Resolved,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Fixed,tilman,TeeWeTee,TeeWeTee,13/Apr/23 17:18,14/Apr/23 17:23,07/May/23 20:06,13/Apr/23 18:23,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.29,3.0.0 PDFBox,,Parsing,,,,0,,,,"Since April we get the following NPE in our software.

PDFBox is used to convert PDFs to images.

 
{code:java}
java.lang.NullPointerException: null
    at org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.getPath(PDTrueTypeFont.java:470) ~[pdfbox-2.0.25.jar:2.0.25]
    at org.apache.pdfbox.rendering.TTFGlyph2D.getPathForGID(TTFGlyph2D.java:144) ~[pdfbox-2.0.25.jar:2.0.25]
    at org.apache.pdfbox.rendering.TTFGlyph2D.getPathForCharacterCode(TTFGlyph2D.java:93) ~[pdfbox-2.0.25.jar:2.0.25]
    at org.apache.pdfbox.rendering.PageDrawer.drawGlyph2D(PageDrawer.java:514) ~[pdfbox-2.0.25.jar:2.0.25]
    at org.apache.pdfbox.rendering.PageDrawer.showFontGlyph(PageDrawer.java:495) ~[pdfbox-2.0.25.jar:2.0.25]
    at org.apache.pdfbox.contentstream.PDFStreamEngine.showGlyph(PDFStreamEngine.java:793) ~[pdfbox-2.0.25.jar:2.0.25]
    at org.apache.pdfbox.contentstream.PDFStreamEngine.showGlyph(PDFStreamEngine.java:811) ~[pdfbox-2.0.25.jar:2.0.25]
    at org.apache.pdfbox.contentstream.PDFStreamEngine.showText(PDFStreamEngine.java:749) ~[pdfbox-2.0.25.jar:2.0.25]
    at org.apache.pdfbox.contentstream.PDFStreamEngine.showTextString(PDFStreamEngine.java:608) ~[pdfbox-2.0.25.jar:2.0.25]
    at org.apache.pdfbox.contentstream.operator.text.ShowText.process(ShowText.java:56) ~[pdfbox-2.0.25.jar:2.0.25]
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:939) ~[pdfbox-2.0.25.jar:2.0.25]
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:514) ~[pdfbox-2.0.25.jar:2.0.25]
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:492) ~[pdfbox-2.0.25.jar:2.0.25]
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:155) ~[pdfbox-2.0.25.jar:2.0.25]
    at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:282) ~[pdfbox-2.0.25.jar:2.0.25]
    at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:355) ~[pdfbox-2.0.25.jar:2.0.25]
    at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:272) ~[pdfbox-2.0.25.jar:2.0.25]
    at org.apache.pdfbox.rendering.PDFRenderer.renderImageWithDPI(PDFRenderer.java:258) ~[pdfbox-2.0.25.jar:2.0.25]{code}
This is a bit strange, since I thought that this bug was fixed with PDFBOX-3488

PdfBox is running on a linux server but when I tried to access the PDFs I failed to find the right one (over 1 million docs on that server).

On the other hand the fix linked in the ticket points to the following implementation:

 
{code:java}
 @Override
 public GeneralPath getPath(int code) throws IOException{
   if (ttf.getGlyph() == null){
     throw new IOException(""glyf table is missing in font "" + getName());
   } {code}
which does not exist anymore in 2.0.3 or higher:

 
{code:java}
@Override
    public GeneralPath getPath(int code) throws IOException{
        int gid = codeToGID(code);
        GlyphData glyph = ttf.getGlyph().getGlyph(gid); {code}
Any idea why an NPE might occur?

`ttf` might be null or `getGlyph` returns null?

 ",Linux server,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Apr 14 17:23:07 UTC 2023,,,,,,,,,,"0|z1h9uo:",9223372036854775807,,,,,,,,,,,,,,,,,,,"13/Apr/23 18:09;tilman;Yes it was fixed in PDFBOX-3488 but also reverted. John wrote that this shouldn't happen because it should have been caught earlier and he made a change to catch it earlier. I'll put it back in the hope that somebody will submit a file with the problem and then we'll know why it happens.;;;","13/Apr/23 18:20;jira-bot;Commit 1909122 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1909122 ]

PDFBOX-5587: avoid NullPointerException if glyf table is missing;;;","13/Apr/23 18:20;jira-bot;Commit 1909123 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1909123 ]

PDFBOX-5587: avoid NullPointerException if glyf table is missing;;;","14/Apr/23 14:28;TeeWeTee;I identified several documents where it (according to the log) did happen. I tried it again and it didn't.  I tried several documents but somehow we only got the error for two weeks and now it is gone. That is really strange. 

Could this be a concurrency issue? E.g. I found the following comment on the getGlyph() method:

 
{code:java}
// PDFBOX-4219: synchronize on data because it is accessed by several threads
// when PDFBox is accessing a standard 14 font for the first time
{code}
I thus tried the image conversion using several threads but couldn't reproduce it.

Out of curiosity: Is the code related to the system fonts or to the (missing/invalid) font definition inside the PDF?;;;","14/Apr/23 15:32;tilman;I remember we had more concurrency issues, but I can't remember when it was fixed. It was related to standard 14 fonts.;;;","14/Apr/23 16:28;TeeWeTee;Was it fixed a long time ago (>2.25.0) or in 2.0.26 / 2.0.27 / 2.0.28 / 2.0.29?;;;","14/Apr/23 17:23;tilman;I really don't know. My sense of time isn't very good.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Java heap space,PDFBOX-5530,13487207,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Blocker,Not A Bug,,lycheng,lycheng,20/Oct/22 06:26,28/Apr/23 15:19,07/May/23 20:06,28/Apr/23 15:19,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,"code（only this part of the code）：

PDDocument load = PDDocument.load(file, MemoryUsageSetting.setupTempFileOnly(-1);

 

hi. Why do I configure it like this, it still takes up so much memory? What is the effect of using setupTempFileOnly. 

!image-2022-10-20-14-30-19-790.png!

!image-2022-10-20-14-30-57-332.png!

!image-2022-10-20-14-32-10-258.png!

[^引起宕机.pdf]",,,,,,,,,,,,,"20/Oct/22 06:30;lycheng;image-2022-10-20-14-30-19-790.png;https://issues.apache.org/jira/secure/attachment/13051222/image-2022-10-20-14-30-19-790.png","20/Oct/22 06:30;lycheng;image-2022-10-20-14-30-57-332.png;https://issues.apache.org/jira/secure/attachment/13051223/image-2022-10-20-14-30-57-332.png","20/Oct/22 06:32;lycheng;image-2022-10-20-14-32-10-258.png;https://issues.apache.org/jira/secure/attachment/13051225/image-2022-10-20-14-32-10-258.png","20/Oct/22 07:01;lycheng;image-2022-10-20-15-01-06-688.png;https://issues.apache.org/jira/secure/attachment/13051231/image-2022-10-20-15-01-06-688.png","20/Oct/22 17:07;tilman;image-2022-10-20-19-07-42-632.png;https://issues.apache.org/jira/secure/attachment/13051247/image-2022-10-20-19-07-42-632.png","20/Oct/22 17:08;tilman;image-2022-10-20-19-08-23-932.png;https://issues.apache.org/jira/secure/attachment/13051248/image-2022-10-20-19-08-23-932.png","20/Oct/22 08:11;lycheng;screenshot-1.png;https://issues.apache.org/jira/secure/attachment/13051234/screenshot-1.png","20/Oct/22 06:56;lycheng;引起宕机-1.pdf;https://issues.apache.org/jira/secure/attachment/13051228/%E5%BC%95%E8%B5%B7%E5%AE%95%E6%9C%BA-1.pdf","20/Oct/22 06:56;lycheng;引起宕机.pdf;https://issues.apache.org/jira/secure/attachment/13051227/%E5%BC%95%E8%B5%B7%E5%AE%95%E6%9C%BA.pdf",,,,,,,,,,9.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Oct 27 11:24:18 UTC 2022,,,,,,,,,,"0|z19itc:",9223372036854775807,,,,,,,,,,,,,,,,,,,"20/Oct/22 06:34;tilman;The current version is 2.0.27. I don't know what your problem is. Maybe increase the value for ""-Xmx"".;;;","20/Oct/22 06:43;lycheng;Hello, my file is only 20M. Configured setupTempFileOnly, it seems invalid.
Why is the memory usage high and the disk usage high too.

What is the difference between setupTempFileOnlyh and setupMainMemoryOnly？;;;","20/Oct/22 06:46;tilman;The 20M is when the file is compressed. Maybe uncompressed it is much more. setupMainMemoryOnly puts all in RAM. setupTempFileOnly puts some data in a temp file. Please attach your file and tell what -Xmx value you use.;;;","20/Oct/22 06:51;tilman;Java will often use the entire memory available and only then do a garbage collection to free some space. So as long as you don't have an OutOfMemory exception then it isn't a bug at all.;;;","20/Oct/22 06:56;lycheng;-Xmx500M
-Xms500M

The file is this attachment：引起宕机.pdf

 !image-2022-10-20-15-01-06-688.png! ;;;","20/Oct/22 07:12;lycheng;I thought setupTempFileOnly could save the file to a temporary file, and the occupied memory could be released, but the situation I tested was that the memory of the old generation was occupied all the time, and the full gc could not be released.;;;","20/Oct/22 07:22;lycheng;a simple demo：

-Xmx500M
-Xms500M
-XX:+PrintGCDetails
-XX:+HeapDumpOnOutOfMemoryError
-XX:HeapDumpPath=D:\fcs\test

public static void main(String[] args) throws IOException {
		File file = new File(""C:/Users/LYCIT/Desktop/需求/引起宕机.pdf"");

		try (PDDocument load = PDDocument.load(file, MemoryUsageSetting.setupTempFileOnly(-1)
				.setTempDir(new File(""D:\\fcs\\test"")))) {


			try {
				Thread.sleep(6000000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}

		} catch (Exception e) {
			System.out.println(e);
		}
	};;;","20/Oct/22 07:57;lycheng;org.apache.pdfbox.cos.COSDocument#objectPool

Can this hashmap be changed to soft reference or weak reference?like WeakHashMap or ConcurrentReferenceHashMap.;;;","20/Oct/22 08:12;lycheng; !screenshot-1.png! 

What is the function of these data? It should be the overflow caused by the continuous addition of this data to org.apache.pdfbox.cos.COSObject#baseObject;;;","20/Oct/22 17:08;tilman;!image-2022-10-20-19-08-23-932.png!

Wow, your file has 25000 entries in the resource dictionary in the first page. That is a record.

No we can't work without this hashmap, these are the objects of that PDF.;;;","20/Oct/22 17:43;mkl;Thousands and thousands of tiny bitmap images. Gigantic content streams.

This is a very uncommon PDF internally... optimizing resource usage while still remaining performant would be quite a challenge.

{quote}Can this hashmap be changed to soft reference or weak reference?like WeakHashMap or ConcurrentReferenceHashMap.{quote}

PDFBox 2.x is based on an architecture that requires all objects in the PDF to be parsed and represented in memory, so ""no"".

You can try PDFBox 3 which offers just-in-time loading. Unfortunately it also requires all loaded objects to remain in memory, so if your processing eventually touches most of the PDF, the resource requirement eventually will be the same. So even there ""no"".

A mode that allows loaded but currently unused objects to be freed again (which would allow for a ""yes"") is not yet implemented in the mainstream PDFBox.;;;","20/Oct/22 23:42;lycheng;Is there any temporary solution?
Or how can I monitor and avoid such files of Thousands and thousands of tiny bitmap images in the program.

{code:java}
A mode that allows loaded but currently unused objects to be freed again (which would allow for a ""yes"") is not yet implemented in the mainstream PDFBox.
{code}

Does this have a planned iteration?Which version can I use later? 
;;;","26/Oct/22 01:49;tuister;Parsing such files seems to be an attack, how about providing some settings to avoid parsing those files, just throw an Exception to the caller?;;;","26/Oct/22 10:17;mkl;{quote}Parsing such files seems to be an attack{quote}
I doubt it's an attack. In particular I doubt it's an attack to prevent _arbitrary loading_ by causing out-of-memory situations.

I think it's more likely that the creator of this document attempted to prevent _text and bitmap extraction_. Text extraction is made difficult by drawing the characters using vector graphics paths instead of using fonts with the side effect of gigantic content streams. And bitmap extraction is made difficult by partitioning the bitmaps (of official looking stamps) into thousands of mini parts, resulting in the thousands and thousands of tiny bitmap images.;;;","27/Oct/22 05:11;lycheng;hi, how can I monitor this attack? What kind of situation can be judged as an attack, such as monitoring the size of the objectpool collection? Do you have any good suggestions?;;;","27/Oct/22 05:14;lycheng;It would also be great if pdfbox could essentially solve it. Some other conversion software does not have this problem, as mupdf.;;;","27/Oct/22 06:42;tilman;Then use mupdf. It's probably C++ based and faster too, and Artifex is a great company (they did ghostscript, which IMHO is the best renderer after Adobe itself). Poppler is also very good.

Even if we had some type of well-done abort that isn't an out of memory situation, that would still mean these files wouldn't be processed on your system and you wouldn't be happy.;;;","27/Oct/22 08:06;lycheng;pdfbox is great. I am very optimistic about pdfbox. You are also very good. I look forward to seeing a good solution to this problem in the future. Thank you.;;;","27/Oct/22 11:24;tuister;In some situations, eg. anti-spam, if we know that parsing certain pdf documents is costly, that's valuable. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong Text Extraction - Unwanted Extra Spaces in the middle of words,PDFBOX-5529,13486915,Bug,Open,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,,,cmaya,cmaya,18/Oct/22 21:27,20/Oct/22 16:47,07/May/23 20:06,,2.0.0,2.0.1,2.0.10,2.0.11,2.0.12,2.0.13,2.0.14,2.0.15,2.0.16,2.0.17,2.0.18,2.0.19,2.0.2,2.0.20,2.0.21,2.0.22,2.0.23,2.0.24,2.0.25,2.0.26,2.0.27,2.0.3,2.0.4,2.0.5,2.0.6,2.0.7,2.0.8,2.0.9,,,,Text extraction,,,,0,,,,"*Overview:* 
We are using PDFBOX as a third party API to extract text from financial PDF documents.

We have been using PDFBox since a long time back, and we have detected a problem related to a bad text extraction on PDFs from a Customer. 

Since we worked with Customer Data we cannot shared the PDF besides that are signed and we cannot even edit them.

*Description of the problem:*

By opening the PDF in Adobe Reader we can see several cases like the following screenshot:
!image-2022-10-18-15-53-06-512.png|width=221,height=211!

Visually it appears to have spaces between words, but if we copy the text from Adobe Reader and paste it into a text editor there is no extra spaces. 

The following is the output that PDFBOX generates at the moment of doing text extraction:
{code:java}
Da te
In v oice number
Ou r r eference
You r reference
Con tact person{code}
(!) *Important note: this behavior is present in all the versions of PDFBox.*

*Analysis:*

By downloading the PDFBOX source code 2.0.27 (this was checked as well in 2.0.26, 2.0.25 and 2.0.24) and testing/debugging we detected that the method _*writePage()* inside *PDFTextStripper.java*_ declared a list of objects:
{code:java}
List<LineItem> line = new ArrayList<LineItem>();{code}
Which subsequently the code add elements into the list:
{code:java}
line.add(LineItem.getWordSeparator()); 
.
.
.
line.add(new LineItem(position));{code}
 

And at some point it passes the list as a parameter into the following statement:
{code:java}
writeLine(normalize(line));{code}
(!) *The important about this list called ""line"" is that somehow the ""LineItem"" objects are having NULL values inserted into it, and this values are at some point interpreted as ""blank spaces"" causing the behavior described above.*

Here is an screenshot of how it is showed in the debugger:

!image-2022-10-18-16-23-00-123.png|width=621,height=195!

!image-2022-10-18-16-26-15-001.png|width=620,height=431!

 

We tried to look for a method that manipulates this list and that we can override, but all of these methods that modified or access the list are protected.

 

(!) *This is an example of how it displayed in the PDF Debugger:*
{code:java}
    q
      94.525 545.32 141 11.2 re
      W*
      n
      BT
        /F3 8.8 Tf
        1 0 0 1 99.325 547.72 Tm
        0 g
        0 G
        [ (D) 22 (a) -131 (t) -109 (e) ] TJ
      ET
    Q 

    q
      94.525 530.9 141 11.225 re
      W*
      n
      BT
        /F3 8.8 Tf
        1 0 0 1 99.325 533.3 Tm
        0 G
        [ (I) 26 (n) -135 (v) -229 (o) -5 (i) 20 (ce) -62 ( ) 59 (n) -44 (u) 30 (m) -27 (b) -75 (e) 28 (r) ] TJ
      ET
    Q

    q
      94.525 516.5 141 11.2 re
      W*
      n
      BT
        /F3 8.8 Tf
        1 0 0 1 99.325 519.7 Tm
        0 G
        [ (O) -73 (u) -151 (r) -44 ( ) 59 (r) -134 (e) 28 (f) -38 (e) 28 (r) -44 (e) 28 (n) -44 (ce) ] TJ
      ET
    Q{code}
 

 ",,,,,,,,,,,,,"18/Oct/22 20:53;cmaya;image-2022-10-18-15-53-06-512.png;https://issues.apache.org/jira/secure/attachment/13051104/image-2022-10-18-15-53-06-512.png","18/Oct/22 21:23;cmaya;image-2022-10-18-16-23-00-123.png;https://issues.apache.org/jira/secure/attachment/13051103/image-2022-10-18-16-23-00-123.png","18/Oct/22 21:26;cmaya;image-2022-10-18-16-26-15-001.png;https://issues.apache.org/jira/secure/attachment/13051102/image-2022-10-18-16-26-15-001.png","19/Oct/22 21:48;cmaya;image-2022-10-19-16-48-36-198.png;https://issues.apache.org/jira/secure/attachment/13051213/image-2022-10-19-16-48-36-198.png",,,,,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Oct 20 16:47:46 UTC 2022,,,,,,,,,,"0|z19h2w:",9223372036854775807,,,,,,,,,,,,,,,,,,,"19/Oct/22 10:42;lehmi;Most likely those empty LineItems are WordSeparator-items. Those special items don't have a text position. 

The more interesting question is, why does PDFBox insert a WordSeparator within a word. I guess the additional values within the {{TJ}} operator hit some threshold which triggers the insertion of the separator. But I'm afraid we can't answer that by staring at the code. We'll need some sort of a sample pdf to debug that piece of code.


;;;","19/Oct/22 17:26;tilman;Maybe try some code change that you think solves the problem. Run the build tests and see the differences. If there are none, or if they are useful, please share them, I'll run them on my larger set.
(In most cases, changes have some drawback)
The diff files appear in pdfbox/target/test-output

However the screenshot of your PDF shows a terrible layout, so you get a terrible text extraction. I don't know why Adobe gets correct text. Maybe they use a dictionary approach.;;;","19/Oct/22 17:29;mkl;Looking at the screen shot it is clear why an extractor would add those spaces, after all you say yourself:
{quote}Visually it appears to have spaces between words,{quote}
And you only wonder why the spaces are there after observing
{quote}but if we copy the text from Adobe Reader and paste it into a text editor there is no extra spaces.{quote}
Please be aware that Adobe Acrobat also takes tagging information into account; if there are *ActualText* information, Acrobat uses them and not heuristics based on the appearance. PDFBox on the other hand does not use the tagging information in its text stripper.

Thus, please check whether your example file has such tags or not. The easiest option would be for you to share the file (or at least a page of it with that behavior).;;;","19/Oct/22 21:54;cmaya;Thanks for replying back!

After analyzing a little bit deeper in the code, I found out that indeed, the PDFTextStripper.java in the writePage method has a validation in which if a threshold is hit then we add an element into the ""line"" list. This if condition is to check it the current text position starts after a new word would be expected to start.
Below is an screenshot of this section of the code, I added a check just to see at which point the TextPosition from the LineItem is null, and seems that this NULL value is coming from the ""LineItem.getWordSeparator"".

*(!) This particular example showed below is from the label ""Date"" showed in description of this ticket.*

If I left the code with that particular condition avoiding the insertion of LineItems with a null TextPosition, the text is extracted correctly.

!image-2022-10-19-16-48-36-198.png|width=924,height=506!

I am trying to see if we have a similar document with the same behavior that we can edit in order to remove the customer sensitive data. The document we are testing at this moment is signed, and due to this I am unable to edit it and remove the sensitive data.;;;","19/Oct/22 22:05;cmaya;I looked for *ActualText* information, but I didn't find any tag like this in the PDF content.;;;","20/Oct/22 16:47;mkl;{quote}I looked for *ActualText* information, but I didn't find any tag like this in the PDF content.{quote}
Then please share the PDF for further analysis.
While you're right that in case of your document the text extraction result would improve by _not_ trying to identify gaps, in general one needs this gap detection.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
getPageLayout throws IllegalArgumentException for empty mode,PDFBOX-5513,13481387,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Fixed,tilman,karolbe,karolbe,13/Sep/22 21:05,29/Sep/22 17:57,07/May/23 20:06,14/Sep/22 03:54,2.0.25,2.0.26,3.0.0 PDFBox,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.27,3.0.0 PDFBox,,PDModel,,,,0,,,,"getPageLayout() method in PDDocumentCatalog can throw an exception IllegalArgumentException when the PageLayout mode is not one of defined in the PageLayout class. In my case the mode is simply an empty string.The PDF documents which contain such unexpected Page Layout value are all rendered by quite old Adobe PDF library 7.0 from 2014 (I can't share the document, it is confidential....).

My suggestion is to modify the method so that, similarly to getPageMode() method, the eventual exception is caught and the method returns the default PageLayout.{color:#9876aa}SINGLE_PAGE {color}mode.{color:#9876aa}
{color}

 

This problem affects the current version in trunk, as well as at least 2.0.25 and 2.0.26.

 

I have created very simple patch which fixes the problem, please consider applying it to the trunk and 2.0.x branch.

 

 ",,,,,,,,,,,,,"13/Sep/22 20:58;karolbe;page_layout_issue.patch;https://issues.apache.org/jira/secure/attachment/13049249/page_layout_issue.patch",,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,Patch,,,,,,,,9223372036854775807,,,,Wed Sep 21 17:37:13 UTC 2022,,,,,,,,,,"0|z18j8g:",9223372036854775807,,,,,,,,,,,,,,,,,,,"14/Sep/22 03:48;jira-bot;Commit 1904053 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1904053 ]

PDFBOX-5513: avoid IllegalArgumentException, as suggested by Karol Bryd;;;","14/Sep/22 03:48;jira-bot;Commit 1904054 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1904054 ]

PDFBOX-5513: avoid IllegalArgumentException, as suggested by Karol Bryd;;;","14/Sep/22 03:50;jira-bot;Commit 1904055 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1904055 ]

PDFBOX-5513: no warning when empty;;;","14/Sep/22 03:50;jira-bot;Commit 1904056 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1904056 ]

PDFBOX-5513: no warning when empty;;;","14/Sep/22 03:54;tilman;Thanks I have committed your suggestion slightly modified; I prefer warning but not for empty strings.;;;","14/Sep/22 05:31;tilman;Please test with a snapshot
https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/2.0.27-SNAPSHOT/;;;","15/Sep/22 11:20;mkl;I'm a bit skeptical seeing a {*}get{*}ter that reports a value different from what's really there. This makes the {*}get{*}ter unusable when one wants to check the value...;;;","15/Sep/22 11:51;msahyoun;@mkl SinglePage is the default value. So in this case I think that returning SinglePage only reflects that. ;;;","15/Sep/22 17:29;mkl;Yes, one can argue along that line. If PDFBox users want to get default values instead of invalid ones or exceptions, then go ahead.

Nonetheless, it feels wrong to me.;;;","16/Sep/22 06:24;msahyoun;What's your proposal?

- no page mode et all or empty -> SinglePage
- one of the pages modes defined -> return the PageMode
- not empty but none of the defined ones -> exception

?

Added note -  one can always check the value using the COS model.

BR
Maruan;;;","18/Sep/22 21:31;mkl;{quote}What's your proposal? ...{quote}

Something along those lines, I'm merely not sure why one should default for the empty name; the empty name is a name after all.

An alternative to the exception could be a new {{PageLayout}} value UNSPECIFIED. People could then decide whether to handle this situation like the default value, as an error, or whether to retrieve the actual value and look at it more closely.

The OP mentions that {{getPageMode}} already caught a `IllegalArgumentException` and returned the default instead. It think that handling these situations alike is even mode important than the approach used.;;;","19/Sep/22 10:35;msahyoun;[~tilman] thoughts? ;;;","19/Sep/22 17:49;tilman;If we create a PageMode.UNSPECIFIED then what would be its value? Also empty string? I think this is now evolving into something complex. And what would be done if we reassign PageMode.UNSPECIFIED after it was created for an ""exotic"" value? It would no longer contain the same string.;;;","21/Sep/22 17:37;mkl;{quote}If we create a PageMode.UNSPECIFIED then what would be its value?{quote}

Most appropriately an attempt to retrieve its value should cause an exception. Thus, this enumeration member would essentially shift the exception to a later time.

Also an attempt to set the document page mode to PageMode.UNSPECIFIED should be rejected.

Oh well, maybe not a good alternative after all...

{quote}I think this is now evolving into something complex.{quote}

Indeed, and that wasn't my intention at all. I just wanted to express that a plain getter IMO should not return a value clearly different from the actual value.

If the method name had indicated that some interpretation takes place (e.g. {{interpretPageMode}} or {{getBestPageModeMatch}} or {{getEffectivePageMode}}), I probably wouldn't have started such an argument at all ;). But as the method with that name has been around for so many years, one also shouldn't rename it on a whim.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PDDocument.load thows IOException in PDF,PDFBOX-5480,13472858,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Not A Problem,,patrick_kochan,patrick_kochan,22/Jul/22 09:02,29/Jul/22 14:04,07/May/23 20:06,29/Jul/22 14:01,2.0.25,2.0.26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Parsing,PDModel,,,0,,,,"I use the PDDocument in my application and noticed that the load method throws an IOException (Error: End-of-File, expected line) with certain PDF files like the one in the attachment.

 

My code:

 
{code:java}
protected List<String> getLocalPages(final Resource completeEditionResource, final Edition edition, final int firstPage) throws Exception {
        PDDocument document = null;
        try {
            final InputStream in = completeEditionResource.getInputStream();
            document = PDDocument.load(in, MemoryUsageSetting.setupTempFileOnly());
        }
        PdfUtils.disableImageCache(document);
        return splitAndSavePages(document, firstPage, completeEditionResource, edition.getPublishedDate());
        } finally {
            if (document != null) {
                document.close();
            }
            completeEditionResource.getInputStream().reset();
        }
}{code}
 

Exception thrown:

 
{code:java}
java.io.IOException: Error: End-of-File, expected line
    at org.apache.pdfbox.pdfparser.BaseParser.readLine(BaseParser.java:1107)
    at org.apache.pdfbox.pdfparser.COSParser.parseHeader(COSParser.java:2650)
    at org.apache.pdfbox.pdfparser.COSParser.parsePDFHeader(COSParser.java:2633)
    at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:219)
    at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1230)
    at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1148)
    at com.flip.CompletePdfAnalyzer.getLocalPages(CompletePdfAnalyzer.java:162){code}
 

 

I successfully downloaded the PDF using FileUtils.copyInputStreamToFile from Apache Commons-IO just before PDDocument.load to verify that the inputStream was correct.

 ","Ubuntu 20.04.4 LTS
Java OpenJDK 11.0.12-open",,,,,,,,,,,,"22/Jul/22 08:39;patrick_kochan;example.pdf;https://issues.apache.org/jira/secure/attachment/13047115/example.pdf",,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Jul 29 14:04:13 UTC 2022,,,,,,,,,,"0|z172xs:",9223372036854775807,,,,,,,,,,,,,,,,,,,"22/Jul/22 14:42;lehmi;The attached file works like a charme. Maybe you overlooked some issue with the input stream? Maybe it wasn't complete?
;;;","29/Jul/22 14:04;patrick_kochan;[~lehmi] I'm sorry for the trouble I've caused. I realized it was an issue related solely to my VPN and not the PDFBox. Anyway, thank you for your effort.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in CmapSubtable.getCharCode,PDFBOX-5465,13468579,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Fixed,tilman,AlbanL,AlbanL,27/Jun/22 12:07,29/Sep/22 17:57,07/May/23 20:06,31/Aug/22 03:05,2.0.25,2.0.26,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.27,3.0.0 PDFBox,,FontBox,,,,0,,,,"Hi,

I got a NPE in the getCharCode method of CmapSubtable :
{code:java}
java.lang.NullPointerException: null
 at org.apache.fontbox.ttf.CmapSubtable.getCharCode(CmapSubtable.java:669) ~[fontbox-2.0.25.jar!/:2.0.25]
 at org.apache.fontbox.ttf.CmapSubtable.getCharCodes(CmapSubtable.java:686) ~[fontbox-2.0.25.jar!/:2.0.25]
 at org.apache.pdfbox.pdmodel.font.PDType0Font.toUnicode(PDType0Font.java:528) ~[pdfbox-2.0.25.jar!/:2.0.25]
 at org.apache.pdfbox.contentstream.PDFStreamEngine.showGlyph(PDFStreamEngine.java:811) ~[pdfbox-2.0.25.jar!/:2.0.25]
 at org.apache.pdfbox.contentstream.PDFStreamEngine.showText(PDFStreamEngine.java:749) ~[pdfbox-2.0.25.jar!/:2.0.25]
 at org.apache.pdfbox.contentstream.PDFStreamEngine.showTextString(PDFStreamEngine.java:608) ~[pdfbox-2.0.25.jar!/:2.0.25]
 at org.apache.pdfbox.contentstream.operator.text.ShowText.process(ShowText.java:56) ~[pdfbox-2.0.25.jar!/:2.0.25]
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:939) ~[pdfbox-2.0.25.jar!/:2.0.25]
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:514) ~[pdfbox-2.0.25.jar!/:2.0.25]
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:492) ~[pdfbox-2.0.25.jar!/:2.0.25]
 at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:155) ~[pdfbox-2.0.25.jar!/:2.0.25]
 at org.apache.pdfbox.text.LegacyPDFStreamEngine.processPage(LegacyPDFStreamEngine.java:155) ~[pdfbox-2.0.25.jar!/:2.0.25]
 at org.apache.pdfbox.text.PDFTextStripper.processPage(PDFTextStripper.java:363) ~[pdfbox-2.0.25.jar!/:2.0.25]
 at org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:291) ~[pdfbox-2.0.25.jar!/:2.0.25]
 at org.apache.pdfbox.text.PDFTextStripper.writeText(PDFTextStripper.java:238) ~[pdfbox-2.0.25.jar!/:2.0.25]
 at org.apache.pdfbox.text.PDFTextStripper.getText(PDFTextStripper.java:202) ~[pdfbox-2.0.25.jar!/:2.0.25]{code}
 

-> It seems, in some cases the glyphIdToCharacterCode array is not instantiated.

Sorry, but for privacy reason I can't share the PDF which cause this issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Aug 30 09:30:28 UTC 2022,,,,,,,,,,"0|z16dxk:",9223372036854775807,,,,,,,,,,,,,,,,,,,"27/Jun/22 15:22;jira-bot;Commit 1902279 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1902279 ]

PDFBOX-5465: avoid NullPointerException;;;","27/Jun/22 15:22;jira-bot;Commit 1902280 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1902280 ]

PDFBOX-5465: avoid NullPointerException;;;","27/Jun/22 17:18;tilman;Snapshot available here:
https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/2.0.27-SNAPSHOT/;;;","30/Aug/22 09:30;lehmi;[~tilman] the change looks good to me. I guess it is ok to resolve the ticket;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
COSStream has been closed Exception on saving PDF document,PDFBOX-5437,13445648,Bug,Open,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,,,sanjivaninikam,sanjivaninikam,18/May/22 13:48,18/May/22 18:35,07/May/23 20:06,,2.0.24,2.0.25,2.0.26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,PDModel,,,,0,,,,"Below exception occurs on saving created pdf,

java.io.IOException: COSStream has been closed and cannot be read. Perhaps its enclosing PDDocument has been closed?
    at org.apache.pdfbox.cos.COSStream.checkClosed(COSStream.java:83) ~[pdfbox-2.0.26.jar:2.0.26]
    at org.apache.pdfbox.cos.COSStream.createRawInputStream(COSStream.java:133) ~[pdfbox-2.0.26.jar:2.0.26]
    at org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream(COSWriter.java:1268) ~[pdfbox-2.0.26.jar:2.0.26]
    at org.apache.pdfbox.cos.COSStream.accept(COSStream.java:416) ~[pdfbox-2.0.26.jar:2.0.26]
    at org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject(COSWriter.java:570) ~[pdfbox-2.0.26.jar:2.0.26]
    at org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects(COSWriter.java:496) ~[pdfbox-2.0.26.jar:2.0.26]
    at org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody(COSWriter.java:480) ~[pdfbox-2.0.26.jar:2.0.26]
    at org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument(COSWriter.java:1162) ~[pdfbox-2.0.26.jar:2.0.26]
    at org.apache.pdfbox.cos.COSDocument.accept(COSDocument.java:452) ~[pdfbox-2.0.26.jar:2.0.26]
    at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1435) ~[pdfbox-2.0.26.jar:2.0.26]
    at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1322) ~[pdfbox-2.0.26.jar:2.0.26]
    at org.apache.pdfbox.pdmodel.PDDocument.save(PDDocument.java:1377) ~[pdfbox-2.0.26.jar:2.0.26]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed May 18 18:35:05 UTC 2022,,,,,,,,,,"0|z12hbs:",9223372036854775807,,,,,,,,,,,,,,,,,,,"18/May/22 14:26;mkl;This sounds like you work with two documents at a time, say A and B, add an object of document A to document B, close A (explicitly or via garbage collection), and then save B.

This cannot work.

You should _clone_ the object from A and only add the clone to B, or you should keep document A open and referenced until after you save B.

The PDFBox {{PDFCloneUtility}} gives you a hint how cloning is done.;;;","18/May/22 18:35;tilman;The clone class will no longer be available in 3.*, it was too ""dangerous"" 😂 (but it can be copied). In most cases changing the sequence of closing (like you suggested) solves these problems.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE during page render,PDFBOX-5418,13439470,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Fixed,tilman,Brunarskyi,Brunarskyi,13/Apr/22 14:34,21/Apr/22 15:38,07/May/23 20:06,14/Apr/22 14:59,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.26,3.0.0 PDFBox,,FontBox,Rendering,,,1,,,," 

Rendering page causes NPE, opening in debugger gives this stacktrace:
{code:java}


java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.NullPointerException
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.done(PagePane.java:481)
    java.desktop/sun.swing.AccumulativeRunnable.run(AccumulativeRunnable.java:112)
    java.base/java.security.AccessController.doPrivileged(Native Method)
    java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
Caused by: java.util.concurrent.ExecutionException: java.lang.NullPointerException
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.done(PagePane.java:461)
    java.desktop/sun.swing.AccumulativeRunnable.run(AccumulativeRunnable.java:112)
    java.base/java.security.AccessController.doPrivileged(Native Method)
    java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
Caused by: java.lang.NullPointerException: null
    org.apache.fontbox.ttf.GlyfCompositeDescript.getContourCount(GlyfCompositeDescript.java:239)
    org.apache.fontbox.ttf.GlyfCompositeDescript.resolve(GlyfCompositeDescript.java:113)
    org.apache.fontbox.ttf.GlyphTable.getGlyphData(GlyphTable.java:216)
    org.apache.fontbox.ttf.GlyphTable.getGlyph(GlyphTable.java:191)
    org.apache.pdfbox.pdmodel.font.PDCIDFontType2.getPath(PDCIDFontType2.java:418)
    org.apache.pdfbox.pdmodel.font.PDType0Font.getPath(PDType0Font.java:620)
    org.apache.pdfbox.rendering.TTFGlyph2D.getPathForGID(TTFGlyph2D.java:144)
    org.apache.pdfbox.rendering.TTFGlyph2D.getPathForCharacterCode(TTFGlyph2D.java:93)
    org.apache.pdfbox.rendering.PageDrawer.drawGlyph2D(PageDrawer.java:514)
    org.apache.pdfbox.rendering.PageDrawer.showFontGlyph(PageDrawer.java:495)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showGlyph(PDFStreamEngine.java:793)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showGlyph(PDFStreamEngine.java:811)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showText(PDFStreamEngine.java:749)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showTextStrings(PDFStreamEngine.java:654)
    org.apache.pdfbox.contentstream.operator.text.ShowTextAdjusted.process(ShowTextAdjusted.java:53)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:939)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:514)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:492)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showForm(PDFStreamEngine.java:186)
    org.apache.pdfbox.rendering.PageDrawer.showForm(PageDrawer.java:1558)
    org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process(DrawObject.java:85)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:939)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:514)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:492)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showForm(PDFStreamEngine.java:186)
    org.apache.pdfbox.rendering.PageDrawer.showForm(PageDrawer.java:1558)
    org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process(DrawObject.java:85)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:939)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:514)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:492)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showForm(PDFStreamEngine.java:186)
    org.apache.pdfbox.rendering.PageDrawer.showForm(PageDrawer.java:1558)
    org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process(DrawObject.java:85)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:939)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:514)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:492)
    org.apache.pdfbox.contentstream.PDFStreamEngine.showForm(PDFStreamEngine.java:186)
    org.apache.pdfbox.rendering.PageDrawer.showForm(PageDrawer.java:1558)
    org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process(DrawObject.java:85)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:939)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:514)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:492)
    org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:155)
    org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:282)
    org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:355)
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:449)
    org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:431)
    java.base/java.lang.Thread.run(Thread.java:829)
 {code}
 

 ",openjdk 11.0.14 2022-01-18 LTS,,,,,,,,,,,,"13/Apr/22 14:34;Brunarskyi;font_issue.pdf;https://issues.apache.org/jira/secure/attachment/13042380/font_issue.pdf",,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,java,Thu Apr 14 14:59:35 UTC 2022,,,,,,,,,,"0|z11fsw:",9223372036854775807,,,,,,,,,,,,,,,,,,,"14/Apr/22 14:58;jira-bot;Commit 1899859 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1899859 ]

PDFBOX-5418: avoid NPE;;;","14/Apr/22 14:58;jira-bot;Commit 1899860 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1899860 ]

PDFBOX-5418: avoid NPE;;;","14/Apr/22 14:59;tilman;Thanks; a snapshot build will be available at
https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/2.0.26-SNAPSHOT/
within a few hours.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PDType1Font <init> Can't read the embedded Type1 font ArialMT,PDFBOX-5417,13439382,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Minor,Duplicate,,Krys,Krys,13/Apr/22 08:55,13/Apr/22 08:57,07/May/23 20:06,13/Apr/22 08:57,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,FontBox,Preflight,XmpBox,,0,pdtype1font,,,"Hello,

I have this error when i send a file to print:

PDType1Font <init> Can't read the embedded Type1 font ArialMT
java.io.EOFException: attempted to read past EOF
    at org.apache.fontbox.pfb.PfbParser.parsePfb(PfbParser.java:163)
    at org.apache.fontbox.pfb.PfbParser.<init>(PfbParser.java:125)
    at org.apache.fontbox.type1.Type1Font.createWithPFB(Type1Font.java:69)
    at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:247)
    at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
    at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:146)
    at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:66)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:939)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:514)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:492)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:155)
    at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:282)
    at org.apache.pdfbox.rendering.PDFRenderer.renderPageToGraphics(PDFRenderer.java:466)
    at org.apache.pdfbox.printing.PDFPrintable.print(PDFPrintable.java:264)
    at java.desktop/sun.print.RasterPrinterJob.printPage(RasterPrinterJob.java:2275)
    at java.desktop/sun.print.RasterPrinterJob.print(RasterPrinterJob.java:1654)

 

PDType1Font <init> Can't read the embedded Type1 font Arial-BoldMT
java.io.EOFException: attempted to read past EOF
    at org.apache.fontbox.pfb.PfbParser.parsePfb(PfbParser.java:163)
    at org.apache.fontbox.pfb.PfbParser.<init>(PfbParser.java:125)
    at org.apache.fontbox.type1.Type1Font.createWithPFB(Type1Font.java:69)
    at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:247)
    at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
    at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:146)
    at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:66)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:939)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:514)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:492)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:155)
    at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:282)
    at org.apache.pdfbox.rendering.PDFRenderer.renderPageToGraphics(PDFRenderer.java:466)
    at org.apache.pdfbox.printing.PDFPrintable.print(PDFPrintable.java:264)
    at java.desktop/sun.print.RasterPrinterJob.printPage(RasterPrinterJob.java:2275)
    at java.desktop/sun.print.RasterPrinterJob.print(RasterPrinterJob.java:1654)","Windows10, JDK15, Gradle 6.7, Spring Boot 2.3.4",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,java,2022-04-13 08:55:14.0,,,,,,,,,,"0|z11f9c:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PDType1Font <init> Can't read the embedded Type1 font ArialMT,PDFBOX-5416,13439379,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Blocker,Not A Bug,,Krys,Krys,13/Apr/22 08:29,15/Apr/22 10:07,07/May/23 20:06,15/Apr/22 10:01,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,FontBox,,,,0,pdtype1font,type1,type1font,"Hello,

I have this error when i send a file to print:

PDType1Font <init> Can't read the embedded Type1 font ArialMT
java.io.EOFException: attempted to read past EOF
    at org.apache.fontbox.pfb.PfbParser.parsePfb(PfbParser.java:163)
    at org.apache.fontbox.pfb.PfbParser.<init>(PfbParser.java:125)
    at org.apache.fontbox.type1.Type1Font.createWithPFB(Type1Font.java:69)
    at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:247)
    at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
    at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:146)
    at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:66)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:939)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:514)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:492)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:155)
    at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:282)
    at org.apache.pdfbox.rendering.PDFRenderer.renderPageToGraphics(PDFRenderer.java:466)
    at org.apache.pdfbox.printing.PDFPrintable.print(PDFPrintable.java:264)
    at java.desktop/sun.print.RasterPrinterJob.printPage(RasterPrinterJob.java:2275)
    at java.desktop/sun.print.RasterPrinterJob.print(RasterPrinterJob.java:1654)

 

Thread PDType1Font <init> Can't read the embedded Type1 font Arial-BoldMT
java.io.EOFException: attempted to read past EOF
    at org.apache.fontbox.pfb.PfbParser.parsePfb(PfbParser.java:163)
    at org.apache.fontbox.pfb.PfbParser.<init>(PfbParser.java:125)
    at org.apache.fontbox.type1.Type1Font.createWithPFB(Type1Font.java:69)
    at org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:247)
    at org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:76)
    at org.apache.pdfbox.pdmodel.PDResources.getFont(PDResources.java:146)
    at org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.process(SetFontAndSize.java:66)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:939)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:514)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:492)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:155)
    at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:282)
    at org.apache.pdfbox.rendering.PDFRenderer.renderPageToGraphics(PDFRenderer.java:466)
    at org.apache.pdfbox.printing.PDFPrintable.print(PDFPrintable.java:264)
    at java.desktop/sun.print.RasterPrinterJob.printPage(RasterPrinterJob.java:2275)
    at java.desktop/sun.print.RasterPrinterJob.print(RasterPrinterJob.java:1654)","Windows 10, JDK15, Gradle 6.7, Spring Boot 2.3.4",,,,,,,,,,,PDFBOX-2607,"13/Apr/22 16:22;Krys;label.pdf;https://issues.apache.org/jira/secure/attachment/13042386/label.pdf",,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,java,Fri Apr 15 10:07:28 UTC 2022,,,,,,,,,,"0|z11f8o:",9223372036854775807,,,,,,,,,,,,,,,,,,,"13/Apr/22 15:32;lehmi;Please attach the pdf causing the exception.

The stacktrace indicates that you are trying to print the pdf, but you've added the components Preflight and Xmpbox to this ticket. Am I missing something or isn't that related at all?
;;;","13/Apr/22 16:18;Krys;Thank You for your response. Preflight and Xmpbox aren't related, sorry. I attached file.;;;","13/Apr/22 16:29;tilman;It looks like the font is broken / cut off. PDFBox then tries a replacement font from your machine. Do you get a decent print?;;;","13/Apr/22 17:40;tilman;The font is indeed ending prematurely. It's also incorrectly embedded (embedding a PFB file), but that one we fixed years ago in PDFBOX-2607.;;;","14/Apr/22 06:48;Krys;Yes, Most of the time I get decent and correct print, but once on a cuple times program freezes.;;;","14/Apr/22 06:53;tilman;Then you need to reproduce this freeze effect. The problem you mention is in your file and the only effect it has is that your logfiles get cluttered.

I don't understand why they used embedded fonts at all, this is just a label, not a long term PDF. They could use the standard 14 fonts.;;;","14/Apr/22 12:36;Krys;Thank You for your answer. I have one more question. Maybe I'm missing something or i'm not educated enough :) but why i can't catch EOFException in this code?

try {
            File file = new File(""D:\\label.pdf"");
            PDDocument pddDocument = PDDocument.load(file);
            for (int i = 0; i < pddDocument.getNumberOfPages(); i++) {
                PDPage page = pddDocument.getPage(i);
                PDResources res = page.getResources();
                for (COSName fontName : res.getFontNames()) {
                    PDFont font = res.getFont(fontName);
                }
            }
        } catch (EOFException e) {
            System.out.println(""Error"");
        } catch (IOException e) {
            System.out.println(""Second error"");
        } catch (Exception e) {
            System.out.println(""Third error"");
        };;;","14/Apr/22 15:01;tilman;That's because we catch it. And then we choose a font that comes close to the broken one.;;;","15/Apr/22 10:07;Krys;Thanks for Your help.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IOException: object reference 112 0 R at offset 18355 in content stream,PDFBOX-5412,13438647,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Fixed,lehmi,tilman,tilman,08/Apr/22 17:21,21/Apr/22 15:38,07/May/23 20:06,10/Apr/22 10:30,2.0.25,3.0.0 PDFBox,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.26,3.0.0 PDFBox,,Parsing,,,,0,regression,,,"didn't happen in 2.0.25

{noformat}
java.io.IOException: object reference 112 0 R at offset 18355 in content stream
    org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool(BaseParser.java:196)
    org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray(BaseParser.java:654)
    org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:875)
    org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue(BaseParser.java:154)
    org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair(BaseParser.java:303)
    org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary(BaseParser.java:228)
    org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:159)
{noformat}
",,,,,,,,,,,,,"08/Apr/22 17:21;tilman;124760.pdf;https://issues.apache.org/jira/secure/attachment/13042170/124760.pdf",,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sun Apr 10 10:30:20 UTC 2022,,,,,,,,,,"0|z11ark:",9223372036854775807,,,,,,,,,,,,,,,,,,,"09/Apr/22 08:37;lehmi;related to PDFBOX-5399;;;","10/Apr/22 10:28;lehmi;There are two versions ob object {{99 0}}

The origin and wellformed version
{code}
99 0 obj
<< /Length 225 /UndoLevel 98 0 R >> 
stream
 q 0 0 612 792 re W n BT /F9 8 Tf 0.4000 g 1.0 0.0 0.0 1.0 61.4840 10.0 Tm 0 Tw 0 Tc (Downloaded 21 Jun 2001 to 129.6.104.142. Redistribution subject to AIP license or copyright, see http://ojps.aip.org/phf/phfcr.jsp) Tj ET Q
endstream
endobj
100 0 obj
<< /Length 3 >> 
stream
 q 
endstream
endobj
{code}

And the not really updated but written again version, which is glued to the following object which results in a malformed pdf
{code}
99 0 obj
<< /Length 225 /UndoLevel 98 0 R >> 
stream
 q 0 0 612 792 re W n BT /F9 8 Tf 0.4000 g 1.0 0.0 0.0 1.0 61.4840 10.0 Tm 0 Tw 0 Tc (Downloaded 21 Jun 2001 to 129.6.104.142. Redistribution subject to AIP license or copyright, see http://ojps.aip.org/phf/phfcr.jsp) Tj ET Q
endstr36 0 obj
<< 
/Type /Pages 
/Kids [ 112 0 R 42 0 R 1 0 R 5 0 R 9 0 R ] 
/Count 5 
>> 
endobj
{code}

The updated object is unknow to the pdf as it is referenced in the xref table. But when the brute force parser is triggered due to the malformed object number of the object {{36 0}} it founds the update version struggles upon the missing end of stream marker. The {{readUntilEndStream}} fallback mechanism reads until the next {{endobj}} which belongs to {{36 0}} so that the stream is extended by that object which leads to the exception.

Saying that, the too strict implementation if {{findObjectKey}} reveals an issue with {{readUntilEndStream}}. I've found a way to make {{findObjectKey}} more lenient so that the issue isn't triggered any more
;;;","10/Apr/22 10:30;jira-bot;Commit 1899698 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1899698 ]

PDFBOX-5412: ignore possible garbage of the previous object;;;","10/Apr/22 10:30;jira-bot;Commit 1899699 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1899699 ]

PDFBOX-5412: ignore possible garbage of the previous object;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The FlowCollection Licensing report is fine in the Desktop Client but when exported as a PDF the scale makes the report unusable.,PDFBOX-5408,13437875,Bug,Open,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,,,Thrinadh,Thrinadh,05/Apr/22 13:24,25/Apr/22 15:53,07/May/23 20:06,,2.0.16,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Rendering,,,,0,,,,"We are using pdfbox version 2.0.11 in lower version of product and in both swing client and pdf we can see similar chart

 

But in higher version of product we updated pdfbox version to v2.0.16 to overcome security vulnerability after that in pdf the license report chart is not printing properly

We don't see any errors

 

Note: we tried with pdfbox version v2.0.25 but still it is not working",,,,,,,,,,,,,"25/Apr/22 14:52;msahyoun;FlowRateUsageReport-Acrobat.png;https://issues.apache.org/jira/secure/attachment/13042900/FlowRateUsageReport-Acrobat.png","05/Apr/22 13:23;Thrinadh;PDF_not _printing_chart_properly.jpg;https://issues.apache.org/jira/secure/attachment/13042019/PDF_not+_printing_chart_properly.jpg","05/Apr/22 13:23;Thrinadh;actual_chart_in_desktop_client.jpg;https://issues.apache.org/jira/secure/attachment/13042020/actual_chart_in_desktop_client.jpg","25/Apr/22 14:43;Thrinadh;flow_rate_usage_report.pdf;https://issues.apache.org/jira/secure/attachment/13042899/flow_rate_usage_report.pdf","25/Apr/22 15:52;tilman;screenshot-1.png;https://issues.apache.org/jira/secure/attachment/13042902/screenshot-1.png",,,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,Patch,,,,,,,,9223372036854775807,,,java,Mon Apr 25 15:53:35 UTC 2022,,,,,,,,,,"0|z11620:",9223372036854775807,,,,,,,,,,,,,,,,,,,"05/Apr/22 17:33;tilman;please attach the PDF;;;","05/Apr/22 17:36;tilman;Also please clarify what you're doing, are you rendering (= displaying) the PDF or are you creating a PDF from a JPEG (""but when exported as a PDF"")?;;;","25/Apr/22 14:43;Thrinadh;[~tilman]  Here I am attching PDF file [^flow_rate_usage_report.pdf]

^We are Creating PDF file and sending to email^;;;","25/Apr/22 14:56;msahyoun;I've opened your PDF in Adobe Acrobat and took a screenshot - the chart is empty (can be verified with other viewers too). How are you generating the PDF i.e. how do you get from your desktop client view to PDF?;;;","25/Apr/22 15:36;mkl;Also looking into the internal page representation, there is a bitmap of the chart without any red bars and without the text field. Other than that there merely is page header and footer material.

Apparently when you updated PDFBox, your PDF creation code broke. Maybe the update caused a transitive update of some other dependency while your PDF creation code depends on the previous version of that dependency.

It looks like you use iText-5.5.13 (AGPL version) to create the PDF. Thus, it should be no problem to share the pivotal parts thereof. ;;;","25/Apr/22 15:53;tilman;This is the image within the PDF:
 !screenshot-1.png! 

How is PDFBox involved in this?;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""Page tree root must be a dictionary"" when attempting to parse pdf ",PDFBOX-5405,13436676,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Minor,Not A Bug,,John Westlund,John Westlund,30/Mar/22 14:15,03/Apr/22 18:28,07/May/23 20:06,03/Apr/22 18:28,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Parsing,,,,0,,,,"Hi,

I have a PDF file that throws the following error when I try to parse it:


{code:java}
Caused by: java.io.IOException: Page tree root must be a dictionary
    at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:198)
    at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:226)
    at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1228)
    at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1202)
    at org.apache.tika.parser.pdf.PDFParser.getPDDocument(PDFParser.java:191)
    at org.apache.tika.parser.pdf.PDFParser.parse(PDFParser.java:149)
    at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:289)
    ... 5 more {code}

I have attached the file in question with this issue.

Might be related to PDFBOX-4915",,,,,,,,,,,,,"30/Mar/22 14:15;John Westlund;Grafiska riktlinjer, fordon LRV.pdf;https://issues.apache.org/jira/secure/attachment/13041790/Grafiska+riktlinjer%2C+fordon+LRV.pdf",,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Mar 31 15:34:02 UTC 2022,,,,,,,,,,"0|z10z34:",9223372036854775807,,,,,,,,,,,,,,,,,,,"30/Mar/22 17:52;tilman;Your PDF is truncated. Open it with NOTEPAD++, you'll notice that there is no %%EOF at the end.;;;","31/Mar/22 15:34;mkl;Indeed it's truncated, considerably so. According to its linearization dictionary the file should have had a size of 1886887 bytes and not merely 491520 bytes...;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Blurry / distorted rendering,PDFBOX-5403,13436477,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Fixed,tilman,Schmidor,Schmidor,29/Mar/22 16:31,29/Sep/22 17:57,07/May/23 20:06,05/Aug/22 03:21,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.27,3.0.0 PDFBox,,Rendering,,,,0,,,,"The attached PDF uses many stripes with an image and a mask.

There seems to be an issue when mask and image are combined.

!image-2022-03-29-18-29-03-860.png|width=518,height=91!",,,,,,,,,,,,,"30/Mar/22 12:38;Schmidor;alpha_interpolation.patch;https://issues.apache.org/jira/secure/attachment/13041774/alpha_interpolation.patch","29/Mar/22 16:28;Schmidor;bad rendering.pdf;https://issues.apache.org/jira/secure/attachment/13041734/bad+rendering.pdf","29/Mar/22 16:29;Schmidor;image-2022-03-29-18-29-03-860.png;https://issues.apache.org/jira/secure/attachment/13041733/image-2022-03-29-18-29-03-860.png","30/Mar/22 12:39;Schmidor;image-2022-03-30-14-39-12-855.png;https://issues.apache.org/jira/secure/attachment/13041775/image-2022-03-30-14-39-12-855.png","31/Mar/22 09:55;Schmidor;image-2022-03-31-11-55-36-061.png;https://issues.apache.org/jira/secure/attachment/13041835/image-2022-03-31-11-55-36-061.png","06/Apr/22 22:53;Schmidor;inver-smooth-scale.patch;https://issues.apache.org/jira/secure/attachment/13042090/inver-smooth-scale.patch","19/Jul/22 13:21;Schmidor;inverse-smooth-scale-shear-2.patch;https://issues.apache.org/jira/secure/attachment/13046977/inverse-smooth-scale-shear-2.patch","26/Jul/22 21:15;Schmidor;inverse-smooth-scale-shear-3.patch;https://issues.apache.org/jira/secure/attachment/13047255/inverse-smooth-scale-shear-3.patch","11/Apr/22 23:13;Schmidor;inverse-smooth-scale-shear.patch;https://issues.apache.org/jira/secure/attachment/13042270/inverse-smooth-scale-shear.patch","13/Apr/22 15:06;Schmidor;screenshot-1.png;https://issues.apache.org/jira/secure/attachment/13042383/screenshot-1.png",,,,,,,,,10.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Aug 05 03:24:29 UTC 2022,,,,,,,,,,"0|z10xuw:",9223372036854775807,,,,,,,,,,,,,,,,,,,"30/Mar/22 06:34;tilman;It's the combination of stencil image and pattern ""color"", that is a known weakness. Look for ""stencil"" in PageDrawer.java.;;;","30/Mar/22 12:45;Schmidor;There are alpha values between 0 and 255, so I tried adding interpolation.

I think it improves somewhat, but I think there is still another issue. There are 1px lines which I think are caused by an offset between image and mask, which generally lowers the image quality. That is visible before and after my changes.

I have another PDF, where this is more noticable. However, I am waiting whether our customer allows to share it.

!image-2022-03-30-14-39-12-855.png|width=634,height=352!;;;","30/Mar/22 15:04;tilman;This doesn't really work, see e.g.
https://issues.apache.org/jira/secure/attachment/12853106/gs-bugzilla692158-schleuse-veryslow.pdf
;;;","31/Mar/22 10:01;Schmidor;I think there is some issue with placing the alpha mask.

If I just set the pixels to ""{color:#000000}raster{color}.setPixel(x, y, {color:#0033b3}new int{color}[]{ {color:#1750eb}0{color}, {color:#1750eb}0{color}, {color:#1750eb}0{color}, alphaPixel[{color:#1750eb}0{color}]});"" there is a line, which hints on an offset in the {color:#000000}renderedMask-images. 
{color}

{color:#000000}Setting ""raster.setPixel(x, y, {color:#0033b3}new int{color}[]{ {color:#1750eb}0{color}, {color:#1750eb}0{color}, {color:#1750eb}0{color}, 255});"" would cause a closed black.{color}

{color:#000000}This then also messes up [^gs-bugzilla692158-schleuse-veryslow.pdf] showing a grid pattern.{color}

!image-2022-03-31-11-55-36-061.png!;;;","01/Apr/22 15:11;tilman;I played around with our code... the bad stuff happens here:
{code}
// draw the mask
BufferedImage mask = pdImage.getImage();
BufferedImage renderedMask = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
g = (Graphics2D) renderedMask.getGraphics();
g.translate(-bounds.getMinX(), -bounds.getMinY());
AffineTransform imageTransform = new AffineTransform(at);
imageTransform.scale(1.0 / mask.getWidth(), -1.0 / mask.getHeight());
imageTransform.translate(0, -mask.getHeight());
g.setRenderingHints(graphics.getRenderingHints());
g.drawImage(mask, imageTransform, null);
g.dispose();
{code}
Save mask and renderedMask to files, and you'll see that renderedMask looks terrible.

I was able to create a better renderedMask by using {{getScaledInstance()}}:
{code}
BufferedImage renderedMask = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
g = (Graphics2D) renderedMask.getGraphics();
g.translate(-bounds.getMinX(), -bounds.getMinY());
AffineTransform imageTransform = new AffineTransform(at);
imageTransform.scale(1.0 / mask.getWidth(), -1.0 / mask.getHeight());
imageTransform.translate(0, -mask.getHeight());
g.setRenderingHints(graphics.getRenderingHints());

int w2 = (int) Math.round(mask.getWidth() * Math.abs(imageTransform.getScaleX()));
int h2 = (int) Math.round(mask.getHeight()* Math.abs(imageTransform.getScaleY()));
Image scaledMask = mask.getScaledInstance(w2, h2, Image.SCALE_SMOOTH);
imageTransform.scale(1f / Math.abs(imageTransform.getScaleY()), 1f / Math.abs(imageTransform.getScaleX()));
g.drawImage(scaledMask, imageTransform, null);
g.dispose();
{code}
and modifying code further down to use that as a gray mask:
{code}
for (int y = 0; y < h; y++)
{
	for (int x = 0; x < w; x++)
	{
		alphaPixel = alpha.getPixel(x, y, alphaPixel);
		rasterPixel = raster.getPixel(x, y, rasterPixel);
		rasterPixel[3] = 255 - alphaPixel[0];
		raster.setPixel(x, y, rasterPixel);
	}
}
{code}
However that has the drawback that the getScaledInstance() call produces a black line in many images so the whole change is worthless.

What we could do (but I haven't tested) is to color-flip the mask, and then scale, and modify the code later down, i.e. not to substract from 255. This way the black line wouldn't bother. But all this gets really too complex.;;;","06/Apr/22 18:23;Schmidor;Tried it with the following code:
{code:java}
                BufferedImage mask = pdImage.getImage();
                byte[] inv = new byte[256];
                for (int i = 0; i < inv.length; i++) {
                    inv[i] = (byte) (255 - i);
                }
                LookupTable table = new ByteLookupTable(0, inv);
                BufferedImage tmp = new BufferedImage(mask.getWidth(), mask.getHeight(), BufferedImage.TYPE_INT_RGB);
                mask = new LookupOp(table, graphics.getRenderingHints()).filter(mask, tmp);
{code}
Indeed that looks good on my PDF: However it breaks, also without the invert, https://issues.apache.org/jira/secure/attachment/12853106/gs-bugzilla692158-schleuse-veryslow.pdf and another PDF I currently can't share.;;;","06/Apr/22 18:53;tilman;Maybe I misapplied the change, your file isn't better (it is black), and it also fails for PDFBOX-1958-cinnebar.pdf, PDFJS-9627.pdf, and gs-bugzilla690297.pdf;;;","06/Apr/22 22:56;Schmidor; A full patch file:
[^inver-smooth-scale.patch] 
I omitted removing the inversion when changing the pixel in my comment :)

For my other PDF and gs-bugzilla692158-schleuse-veryslow.pdf w2/h2 is 0 as imageTransform.getScaleX() / imageTransform.getScaleY() is 0.0. I suspect that this is causing problems with those.;;;","07/Apr/22 19:15;tilman;Ah, you improved the code I proposed. (Btw there's a X-Y-mismatch bug in the ""imageTransform.scale("" line)
This works really nicely with your file. Yeah, the ""Schleuse"" file is flawed. And PDFBOX-2171-002-002710-p14.pdf (""New Harmony Consolidated"" and ""Sailor Springs"" patterns).;;;","11/Apr/22 23:20;Schmidor;Next try  :)

scaleX/scaleY (m00, m11) in the Matrix might be 0.0. In those the shearing (m01, m10) are non 0.0. That probably is a 90° rotation. If those are used for scaling it works.
Then again, if the factor is too small, the result still gets too blurry. For that I added the <.25 -> *2 loop.

 [^inverse-smooth-scale-shear.patch] ;;;","13/Apr/22 06:27;tilman;Thanks, the Schleuse file is better, I don't mind that the grid is different than Adobe. However the pattern in PDFBOX-2171-002-002710-p14.pdf is still missing.;;;","13/Apr/22 15:16;Schmidor;In current head it looks like a pattern, but its also not like the original in Acrobat;
!screenshot-1.png|width=372,height=481!;;;","13/Apr/22 18:12;tilman;Yeah I know it's far from perfect, but with your change there was nothing at all.;;;","13/Apr/22 19:12;Schmidor;Unfortunately, that what is visible seems to be the issue, which caused the black lines in the other PDFs.

I don't think this is a good PDF. To me it seems even in Acrobat to be more a rendering issue than the intended result. If I remove setting the alpha value, it looks like that should have been diagonal lines like the other ""oil"" areas.;;;","20/Apr/22 17:57;tilman;The main problem here is that I'd like that improvements never make existing files worse. I don't really care about the PDFBOX-2171-002-002710-p14.pdf file but if that one doesn't render properly anymore, who knows what other files won't?

I'm wondering if one could use a strategy that decides to use the old scaling method if something with pixels results in a blank pattern. Or if the pattern is very small / something that we assume will not turn out good.;;;","19/Jul/22 13:34;Schmidor;How about this version, which only does the scaling if the transform is not too small, but still always does the inversion for smoother rendering.
[^inverse-smooth-scale-shear-2.patch]
The ""pattern"" in 002-002710-p14.pdf should be visible now, only not as dark as in current head. ""bad rendering.pdf"" and my other file do work with that.;;;","20/Jul/22 03:26;tilman;Thanks, I'll investigate this when the heat wave is over, maybe earlier.;;;","23/Jul/22 14:53;tilman;""new harmony"" is barely visible now IMHO :-(

- gs-bugzilla692158-schleuse-veryslow.pdf: less blue, but acceptable
- PATTYP2.pdf: slightly different, but ok
- PDFJS-9627.pdf: much better
- pop-bugzilla64892-p3-slow.pdf: different (but always wrong, this is a tricky file)
;;;","23/Jul/22 14:55;tilman;Btw you can get the actual scaling by converting your {{AffineTransform}} to a PDFBox {{Matrix}} and using {{Matrix.getScalingFactorX()}} and {{Matrix.getScalingFactorY()}};;;","26/Jul/22 21:16;Schmidor;Switching for old/new by using the scaling value was a bit problematic for one of my files. Switching on mask size now works.

I'm a bit uncomfortable also deactivating the inversion by mask size, but otherwise this will not work for 002-002710-p14.pdf

[^inverse-smooth-scale-shear-3.patch]

Thanks for the {{Matrix.getScalingFactorX()}} hint :);;;","27/Jul/22 18:45;tilman;Thank you [~Schmidor] this is good now. The pattern is darker but this is better than barely having it at all. I will commit this before the next release.
;;;","31/Jul/22 09:03;jira-bot;Commit 1903135 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1903135 ]

PDFBOX-5403: improve stencil masks, as suggested by Oliver Schmidtmer;;;","31/Jul/22 09:03;jira-bot;Commit 1903136 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1903136 ]

PDFBOX-5403: improve stencil masks, as suggested by Oliver Schmidtmer;;;","31/Jul/22 18:16;tilman;I've committed it and added my thoughts as a comment, despite knowing that code comments can't be trusted.;;;","05/Aug/22 03:21;tilman;[~Schmidor] Thanks for your contribution and your patience!;;;","05/Aug/22 03:24;tilman;I also tested using GRAY instead of RGB and it worked but I didn't modify that, because I remember that a long time ago during a crazy debug session I discovered that java is converting everything to RGB internally. There's probably a code comment or a JIRA comment somewhere.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
POCIDFontType2 (Wingdings) encode throws a NullPointerException,PDFBOX-5402,13435880,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Fixed,tilman,mbayerPK,mbayerPK,25/Mar/22 19:25,21/Apr/22 15:38,07/May/23 20:06,26/Mar/22 04:22,2.0.21,2.0.22,2.0.23,2.0.24,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,2.0.26,3.0.0 PDFBox,,FontBox,,,,0,,,,"Problem;
 * It is known that wingdings based fonts do not support encoding from https://issues.apache.org/jira/browse/PDFBOX-4714. However it is unexpected that a call to encode on a wingdings POCIDFontType2 returns a NullPointerException.

Notes:
 * The issue seems to lie within PDFont POCIDFontType2
 * The POCIDFontType2 encode function is only known to throw IOException or UnsupportedOperationException(s)
 * Please see the attached test file with the font in question that causes the NullPointerException to be thrown
 * Stacktrace: 
{code:java}
java.lang.NullPointerException
	at org.apache.pdfbox.pdmodel.font.PDCIDFontType2.encode(PDCIDFontType2.java:359)
	at org.apache.pdfbox.pdmodel.font.PDType0Font.encode(PDType0Font.java:424)
	at org.apache.pdfbox.pdmodel.font.PDFont.encode(PDFont.java:333)
{code}",PDFBox 2.0.25 used via a gradle plugin (has been tested as far back as PDFBox 2.0.21),,,,,,,,,,,,"25/Mar/22 19:23;mbayerPK;Wingdings.pdf;https://issues.apache.org/jira/secure/attachment/13041623/Wingdings.pdf",,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Mar 28 16:04:38 UTC 2022,,,,,,,,,,"0|z10u7c:",9223372036854775807,,,,,,,,,,,,,,,,,,,"25/Mar/22 19:30;tilman;Please post some minimal code. You mention ""encoding"", but reusing fonts from a PDF doesn't work because these subsets are not meant to do that.;;;","25/Mar/22 19:34;mbayerPK;will do, give me a bit to get a sample posted here;;;","25/Mar/22 21:39;mbayerPK;{code:none}
import org.apache.pdfbox.cos.COSName
import org.apache.pdfbox.pdmodel.PDDocument
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertDoesNotThrow
import java.io.IOException
import java.nio.file.Files
import java.nio.file.Paths
import java.util.HashSet
import kotlin.io.path.div

class WingdingsTest {
    @Test
    fun `test for wingdings`() {
        // Get Wingdings.pdf from current working directory
        val path = Paths.get("""").toAbsolutePath() / ""Wingdings.pdf""

        val testChar = '*'
        val testSet = HashSet<COSName>()

        val inMemoryPdf = PDDocument.load(Files.newInputStream(path).buffered(64 * 1024))

        assertDoesNotThrow {
            inMemoryPdf.use { document ->

                for (page in document.pages) {
                    val resources = page.resources
                    for (name in resources.fontNames) {
                        val font = resources.getFont(name)
                        try {
                            if (font.encode(testChar.toString()) != null) testSet.add(name)
                        } catch (expected: IOException) {
                            // handled
                        } catch (expected: IllegalArgumentException) {
                            // handled
                        } catch (expected: UnsupportedOperationException) {
                            // handled
                        }
                        // NPE not handled
                    }
                }
            }
        }
    }
}
{code}

the sample is a junit test written in kotlin;;;","26/Mar/22 04:18;jira-bot;Commit 1899202 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1899202 ]

PDFBOX-5402: avoid NPE;;;","26/Mar/22 04:18;jira-bot;Commit 1899203 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1899203 ]

PDFBOX-5402: avoid NPE;;;","26/Mar/22 04:22;tilman;Thanks for the report!;;;","28/Mar/22 16:04;mbayerPK;Thank you for the fix!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Certain PDF cannot be processed,PDFBOX-5397,13435162,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Blocker,Fixed,tilman,th@pmgnet.de,th@pmgnet.de,22/Mar/22 16:45,21/Apr/22 15:38,07/May/23 20:06,30/Mar/22 03:01,2.0.24,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.26,3.0.0 PDFBox,,Rendering,,,,0,,,,"!https://cdn.discordapp.com/attachments/381016918703996928/955833631484563566/unknown.png|width=570,height=291!

For certain PDFs where we use PDFBox to open a PDF, scan for defined dummy QR codes on it, and then replace the dummy with a real QR code, we either get the above error, or the process does not terminate.

A sample file TET_5_4xxx_GR_00_00_XX_14_F.pdf or TSA_5_BF2x_GR_-1_01_XX_09_F.pdf .
They both lead to the above problem.

Our own analysis so far is that it might be the same issue as mentionend in [https://stackoverflow.com/questions/69237146/pdfbox-renderimagewithdpi-hangs-sometimes]

 

For our company PMG Projektraum GmbH, Munich, Germany, this is an essential function. Currently users cannot download PDFs in most cases because of this: The download tries to add a QR code and never ends.

It could be that the QR code on these PDFs causes issues because it is in a certain layer. We observed that in Adobe Reader we see a QR Code but with or own viewer it is invisible:


This is TSA_5_4xxx_SH_XX_05_XX_03_F.pdf

where we have the same issues


Any idea, what this might be and how to solve it?",,,,,,,,,,,,,"22/Mar/22 16:24;th@pmgnet.de;TET_5_4xxx_GR_00_00_XX_14_F.pdf;https://issues.apache.org/jira/secure/attachment/13041427/TET_5_4xxx_GR_00_00_XX_14_F.pdf","22/Mar/22 16:44;th@pmgnet.de;TSA_5_4xxx_SH_XX_05_XX_03_F.pdf;https://issues.apache.org/jira/secure/attachment/13041425/TSA_5_4xxx_SH_XX_05_XX_03_F.pdf","22/Mar/22 18:00;msahyoun;TSA_5_4xxx_SH_XX_05_XX_03_F1.jpg;https://issues.apache.org/jira/secure/attachment/13041429/TSA_5_4xxx_SH_XX_05_XX_03_F1.jpg","22/Mar/22 16:30;th@pmgnet.de;TSA_5_BF2x_GR_-1_01_XX_09_F.pdf;https://issues.apache.org/jira/secure/attachment/13041426/TSA_5_BF2x_GR_-1_01_XX_09_F.pdf","23/Mar/22 11:25;th@pmgnet.de;image-2022-03-23-12-25-56-963.png;https://issues.apache.org/jira/secure/attachment/13041480/image-2022-03-23-12-25-56-963.png","23/Mar/22 11:29;th@pmgnet.de;image-2022-03-23-12-29-03-735.png;https://issues.apache.org/jira/secure/attachment/13041481/image-2022-03-23-12-29-03-735.png",,,,,,,,,,,,,6.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,Important,,,,,,,,9223372036854775807,,,,Wed Mar 30 03:02:35 UTC 2022,,,,,,,,,,"0|z10ptc:",9223372036854775807,,,,,,,,,,,,,,,,,,,"22/Mar/22 17:57;msahyoun;Why do you need to render the PDF when the use case is to look for a dummy object and replace that?;;;","22/Mar/22 18:02;msahyoun;I've added a rendition of TSA_5_4xxx_SH_XX_05_XX_03_F.pdf. Works fine for me. Tested using the command line PDFToImage utility. Which version of PDFBox are you using? Which OS ...;;;","22/Mar/22 18:20;tilman;""could not initialize class java.awt.graphicsenvironment$localge"" finds a lot of answers.;;;","22/Mar/22 18:38;tilman;Adobe claims that something is wrong with TET_5_4xxx_GR_00_00_XX_14_F.pdf . Same for TSA_5_BF2x_GR_-1_01_XX_09_F.pdf . I was able to render all files with 300dpi (but it took very long).;;;","22/Mar/22 19:05;tilman;Also mention what jdk you're using. Always update to the latest jdk of one number.;;;","23/Mar/22 11:39;th@pmgnet.de;a) ""Why do you need to render the PDF when the use case is to look for a dummy object and replace that?""
*Is there better ways to try to replace a dummy QR code?*
We would love to change it in the long run.

b) ""I've added a rendition of TSA_5_4xxx_SH_XX_05_XX_03_F.pdf. Works fine for me. Tested using the command line PDFToImage utility. Which version of PDFBox are you using? Which OS ...""
OS = Debian 11
*JDK = OpenJDK 17*
JRE = no installation
*PDFBox = 2.0.24*
on our production server

TSA_5_4xxx_SH_XX_03_F.pdf also works best for us. Thing is, it only generates a new PDF locally, on Production it seems not to terminate.

 

File that is most problematic from the above is the 09 one (really large), here the comment of our developer:

!image-2022-03-23-12-29-03-735.png|width=564,height=243!

{color:#00875a}c) ""could not initialize class java.awt.graphicsenvironment$localge"" finds a lot of answers.{color}

{color:#00875a}Seems to be an environment problem of our test environment only. Seems that xhost is missing there. It is not an issue on Production.{color}
*{color:#00875a}You can ignore that for the moment.{color}*

{color:#172b4d}d) ""Adobe claims that something is wrong with TET_5_4xxx_GR_00_00_XX_14_F.pdf . Same for TSA_5_BF2x_GR_-1_01_XX_09_F.pdf . I was able to render all files with 300dpi (but it took very long).""
The files were created with {*}""PDFTron""{*}. [https://www.pdftron.com/] Customer uses that, we can't influence that choice.
{color}

{color:#172b4d}{*}Do you know more about this software{*}, maybe from other problem tickets, how this tool must be used with generating PDFs to avoid such issues?
{color}

 ;;;","23/Mar/22 16:31;jira-bot;Commit 1899152 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1899152 ]

PDFBOX-5397: use dash workaround for all versions; remove version detection;;;","23/Mar/22 16:31;jira-bot;Commit 1899153 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1899153 ]

PDFBOX-5397: use dash workaround for all versions; remove version detection;;;","23/Mar/22 16:31;tilman;TET_5_4xxx_GR_00_00_XX_14_F.pdf fails bitonal rendering with Amazon Corretto 11, 17 and 18 but works on jdk8.

Here's what happens last:
{noformat}
PDFOperator{d} [COSArray{[COSFloat{.001}, COSInt{0}, COSInt{0}, COSInt{0}]}, COSFloat{.001}]
PDFOperator{m} [COSFloat{1182.74}, COSFloat{814.76}]
PDFOperator{l} [COSFloat{1428.79}, COSFloat{814.76}]
PDFOperator{S} []
{noformat}
The cause is (once again) a java bug related to a poor dash pattern. As seen in PDFBOX-3360, PDFBOX-2373, PDFBOX-2929, PDFBOX-3204, PDFBOX-3813 and PDFBOX-3724. We have a workaround but it is disabled for jdk10 and higher since PDFBOX-4492 because I thought they had fixed it. So they didn't.
{code}
public class DashCrash
{
    public static void main(String[] args)
    {
        System.out.println(""Version: "" + System.getProperty(""java.version""));
        long t0 = System.currentTimeMillis();
        BufferedImage bim = new BufferedImage(2000, 2000, BufferedImage.TYPE_BYTE_BINARY);
        Graphics2D g2d = (Graphics2D) bim.getGraphics();
        GeneralPath path = new GeneralPath();
        path.moveTo(1182.74f, 814.76f);
        path.lineTo(1428.79f, 814.76f);
        path.closePath();
        float[] dash = {0.001f};
        BasicStroke stroke = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 10, dash, 0);
        g2d.setStroke(stroke);
        g2d.draw(path);
        g2d.dispose();
        System.out.println(""done in "" + (System.currentTimeMillis() - t0) + "" millis"");
    }
}
{code}
I played around a bit: it does end some time, and the time depends on the value, but also on the image type. 0.005 is done in 3 seconds, 0.002 in 25 seconds.

Re Adobe error msg, no idea what's going on, maybe it's the dash pattern, maybe not. It's probably not the fault of PDFTron. The pattern is likely calculated by another software that uses PDFTron. So that software should avoid using tiny tiny dash patterns, these make no sense.;;;","23/Mar/22 16:51;tilman;Snapshot is available now:
https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/2.0.26-SNAPSHOT/
;;;","29/Mar/22 10:24;th@pmgnet.de;We have now manually added a timeout in our placeholder search and successfully use a fallback in that case for problematic files.
We tried a validate method of PDFBox but there we could not really identify problematic files, this might one of your future improvements.

But the initial problem we found a solution now, thanks a lot for your feedback, that helped.
Ticket is closed.;;;","30/Mar/22 03:02;tilman;The 2.0.26 version will come out soon so your workaround would be needed less.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Hangup in COSFilterInputStream.nextRange,PDFBOX-5395,13434856,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Fixed,tilman,ovoled,ovoled,21/Mar/22 09:23,21/Apr/22 15:38,07/May/23 20:06,30/Mar/22 02:58,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.26,3.0.0 PDFBox,,,,,,0,,,,"On some broken PDFs call _PDSignature.getSignedContent_ never returns.
After exploring stacktrace I've found cycle in _COSFilterInputStream.nextRange_.
{code:java}
            while (this.position < this.ranges[this.range][0])
            {
                long skipped = super.skip(this.ranges[this.range][0] - this.position);
                this.position += skipped;
            }
{code}
Javadoc for _skip_ says _""The skip method may, for a variety ofreasons, end up skipping over some smaller number of bytes, possibly 0.""_
So, when _skip_ returns 0 this cycle became infinite.
Tried in versions 2.0.25 and 3.0.0-RC1.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Mar 31 10:20:45 UTC 2022,,,,,,,,,,"0|z10nxk:",9223372036854775807,,,,,,,,,,,,,,,,,,,"21/Mar/22 17:06;tilman;Can you share such a file? My guess is that the range contains some bad values, and I'd just throw an IOException with details.;;;","21/Mar/22 18:21;ovoled;Sorry, my file is with personal data. But yes, it seems that the range contains bad values. Maybe (not sure) return value of _skip_ should be checked and if it is 0 _IOException_ should be thrown.;;;","21/Mar/22 18:54;jira-bot;Commit 1899113 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1899113 ]

PDFBOX-5395: avoid endless loop, as suggested by Aleksej Kozlov;;;","21/Mar/22 18:54;jira-bot;Commit 1899114 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1899114 ]

PDFBOX-5395: avoid endless loop, as suggested by Aleksej Kozlov;;;","21/Mar/22 18:55;tilman;Can you open such a file with an editor like NOTEPAD++ ? Search for ""/ByteRange"". Then comes 4 values.;;;","29/Mar/22 17:00;ovoled;/ByteRange[0 17131 30609 5130                      ]

File size is 35739.

Now exception is throwed with COSFilterInputStream.java from your commit.
{code:java}
Exception in thread ""main"" java.io.IOException: FilterInputStream.skip() returns 0, range: [37696, 38191]
    at org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.nextRange(COSFilterInputStream.java:110)
    at org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.read(COSFilterInputStream.java:71)
    at org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.read(COSFilterInputStream.java:65)
    at org.apache.pdfbox.io.IOUtils.copy(IOUtils.java:68)
    at org.apache.pdfbox.io.IOUtils.toByteArray(IOUtils.java:52)
    at org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.toByteArray(COSFilterInputStream.java:82)
    at org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature.getSignedContent(PDSignature.java:447)
    at Main.main(Main.java:45){code};;;","29/Mar/22 18:22;tilman;I wonder if there are two /ByteRange arrays in that file. Because the one you posted is fine. The one from the exception text has a beginning offset that is after the file size?! Maybe the cause is more complex, and the skip returning 0 is a result of something unknown.;;;","30/Mar/22 02:59;tilman;I've set this to resolved; if you think there's more, please try some debugging where this past-EOF number comes from and create a new issue.;;;","31/Mar/22 10:20;ovoled;Seems that file contains two signatures. Acrobat Reader says that file cannot be opened (it's ok, I consider the file is broken). Method document.getSignatureDictionaries() returns two elements. Both has filter Adobe.PPKLite / adbe.pkcs7.detached. But when I search in text editor for ""ByteRange"" there is only one place found. And even for ""PPKLite"" there is only one place found. Maybe second signature is in compressed stream?

At least the problem with hangup is gone.

Thank you!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NegativeArraySizeException in pfb parser with 0 byte pfb font file,PDFBOX-5393,13434642,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Fixed,tilman,fdelapena,fdelapena,19/Mar/22 01:40,21/Apr/22 15:38,07/May/23 20:06,19/Mar/22 04:19,1.8.16,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,1.8.17,2.0.26,3.0.0 PDFBox,FontBox,,,,0,,,,"While creating font cache, the application exits with an uncaught exception due to corrupted font files, specifically with a 0-byte .pfb file placed on a parsed font directory.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat Mar 19 04:28:00 UTC 2022,,,,,,,,,,"0|z10mm8:",9223372036854775807,,,,,,,,,,,,,,,,,,,"19/Mar/22 04:09;tilman;Ouch 😂
{noformat}
Caused by: java.lang.NegativeArraySizeException: null
    org.apache.fontbox.pfb.PfbParser.parsePfb(PfbParser.java:124)
    org.apache.fontbox.pfb.PfbParser.<init>(PfbParser.java:102)
    org.apache.fontbox.type1.Type1Font.createWithPFB(Type1Font.java:54)
    org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.addType1Font(FileSystemFontProvider.java:757)
    org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.scanFonts(FileSystemFontProvider.java:386)
    org.apache.pdfbox.pdmodel.font.FileSystemFontProvider.<init>(FileSystemFontProvider.java:353)
    org.apache.pdfbox.pdmodel.font.FontMapperImpl$DefaultFontProvider.<clinit>(FontMapperImpl.java:140)
    org.apache.pdfbox.pdmodel.font.FontMapperImpl.getProvider(FontMapperImpl.java:159)
    org.apache.pdfbox.pdmodel.font.FontMapperImpl.findFont(FontMapperImpl.java:413)
    org.apache.pdfbox.pdmodel.font.FontMapperImpl.findFontBoxFont(FontMapperImpl.java:374)
    org.apache.pdfbox.pdmodel.font.FontMapperImpl.getFontBoxFont(FontMapperImpl.java:348)
    org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:277)
{noformat};;;","19/Mar/22 04:18;jira-bot;Commit 1899044 from Tilman Hausherr in branch 'pdfbox/branches/1.8'
[ https://svn.apache.org/r1899044 ]

PDFBOX-5393: avoid NegativeArraySizeException;;;","19/Mar/22 04:18;jira-bot;Commit 1899045 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1899045 ]

PDFBOX-5393: avoid NegativeArraySizeException;;;","19/Mar/22 04:18;jira-bot;Commit 1899046 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1899046 ]

PDFBOX-5393: avoid NegativeArraySizeException;;;","19/Mar/22 04:19;tilman;Thanks for reporting. A snapshot should be available soon at 
https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/2.0.26-SNAPSHOT/;;;","19/Mar/22 04:27;jira-bot;Commit 1899048 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1899048 ]

PDFBOX-5393: add tests;;;","19/Mar/22 04:28;jira-bot;Commit 1899049 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1899049 ]

PDFBOX-5393: add tests;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TextToPDF appends space to each line,PDFBOX-5390,13434206,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Minor,Fixed,tilman,tilman,tilman,16/Mar/22 19:07,21/Apr/22 15:38,07/May/23 20:06,19/Mar/22 12:44,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.26,3.0.0 PDFBox,,Utilities,,,,0,,,,"As reported by ""flywire"" on the users mailing list.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Mar 18 18:24:54 UTC 2022,,,,,,,,,,"0|z10jxc:",9223372036854775807,,,,,,,,,,,,,,,,,,,"16/Mar/22 19:09;jira-bot;Commit 1898970 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1898970 ]

PDFBOX-5390: don't append space at the end of each line;;;","16/Mar/22 19:09;jira-bot;Commit 1898971 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1898971 ]

PDFBOX-5390: don't append space at the end of each line;;;","16/Mar/22 20:02;jira-bot;Commit 1898973 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1898973 ]

PDFBOX-5390: add test;;;","16/Mar/22 20:02;jira-bot;Commit 1898974 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1898974 ]

PDFBOX-5390: add test;;;","17/Mar/22 19:42;jira-bot;Commit 1898993 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1898993 ]

PDFBOX-5390: improved test to increase code coverage;;;","17/Mar/22 19:42;jira-bot;Commit 1898994 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1898994 ]

PDFBOX-5390: improved test to increase code coverage;;;","17/Mar/22 21:40;flywire;I understand this version is not available as a compiled Windows download yet so I haven't confirmed the fix.

Can you confirm that with this fix all leading and trailing spaces, and blank lines, are retained using pdfbox-app TextToPDF and ExtractText? I'm not sure how a blank line would be retained, it might need to be generated as a space character (ie no longer blank).

Test code:
{noformat}
""Lorem ipsum dolor sit amet,\n""
""    consectetur adipiscing \n""
""\n""
""elit. sed do eiusmod""
 {noformat}
 
Trailing CRLF comment noted.;;;","18/Mar/22 03:08;tilman;It's available here:
https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/2.0.26-SNAPSHOT/

This fix only eliminates the extra blank at the end of lines. I don't know if there are other bugs in the software.;;;","18/Mar/22 05:35;flywire;The test passed but I don't think it was very useful. v2.0.25 is more reasonable.

>java -jar pdfbox-app-2.0.26.jar TextToPDF -standardFont Courier test.pdf test.txt

Using the test code in my post above v2.0.26 strips all leading and trailing spaces from the line so indented lines are lost but the blank line is retained.

>java -jar pdfbox-app-2.0.26.jar ExtractText test.pdf test1.txt

The above command run on the pdf generated by pdfbox-app-2.0.26.jar discards the blank line.
{noformat}
""Lorem ipsum dolor sit amet,\n""
""consectetur adipiscing\n""
""elit. sed do eiusmod\n""
{noformat}

The above command run on the pdf generated by pdfbox-app-2.0.25.jar gives the same output as pdfbox-app-2.0.25.jar (ie strip all trailing spaces and add a space and CRLF).
{noformat}
""Lorem ipsum dolor sit amet, \n""
""    consectetur adipiscing \n""
"" \n""
""elit. sed do eiusmod \n""
{noformat}
----
I'd expect TextToPDF to retain leading and trailing whitespace characters, and a space character on blank lines would be a good option to retain blank lines.;;;","18/Mar/22 07:09;tilman;ExtractText is trying to guess paragraphs so there may be some changes. But the missing leading blanks in TextToPDF is a bug, thanks for pointing me to it. If I can't fix this one this weekend then I'll revert the whole change because we're close to a release.;;;","18/Mar/22 07:19;tilman;I had a quick look, the flaw in the change is because we split by spaces. So individual ""words"" may be empty. So the second best would be to remove a space at the end of a line (that was my first idea yesterday but I discarded it because it looked like an ""easy"" idea to conpensate for what I saw as a flawed algorithm). The best idea would probably be to remember whether we're at the beginning of a line and only then add a space before adding the word.;;;","18/Mar/22 16:38;jira-bot;Commit 1899036 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1899036 ]

PDFBOX-5390: use negative split parameter to collect trailing spaces; fix regression that swallowed leading spaces because words can be empty; add and improve test;;;","18/Mar/22 16:38;jira-bot;Commit 1899037 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1899037 ]

PDFBOX-5390: use negative split parameter to collect trailing spaces; fix regression that swallowed leading spaces because words can be empty; add and improve test;;;","18/Mar/22 17:06;jira-bot;Commit 1899038 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1899038 ]

PDFBOX-5390: increase code coverage for FF handling;;;","18/Mar/22 17:06;jira-bot;Commit 1899039 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1899039 ]

PDFBOX-5390: increase code coverage for FF handling;;;","18/Mar/22 18:24;tilman;new version at
https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/2.0.26-SNAPSHOT/

To get the newlines, call {{stripper.setParagraphStart(""\n"");}}.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ToUnicodeWriter.writeTo allows byte overflow in bfrange operator,PDFBOX-5387,13433660,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Fixed,lehmi,ryan.jackson,ryan.jackson,14/Mar/22 14:24,21/Apr/22 15:38,07/May/23 20:06,20/Mar/22 12:01,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.26,3.0.0 PDFBox,,PDModel,,,,0,,,,"The {{writeTo}} method of {{ToUnicodeWriter}} allows overflow in the low-order byte when writing the {{(begin/end)bfrange}} operator.

As far as I can tell it is used only with the {{PDCIDFontType2Embedder}} class. I believe the bug exists in both the main trunk and in the 2.x branch. The code in question may be found [here|https://github.com/apache/pdfbox/blob/trunk/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/ToUnicodeWriter.java#L133-L136] .

The portion of the PDF specification (version 1.7) that bears upon this code is Section 5.9, Example 5.16.

The existing code attempts to limit the range logic to changes less than or equal to 255 code points, but it fails to account for at least the following situation by allowing this (for example):

[srcCode1 srcCode2 dstString]
03FF 0400 0036

The overflow between srcCode1 and srcCode2 is not allowed by the specification and any text extraction will fail. The glyphs themselves render fine so it is not immediately obvious there is a problem until one tries to examine the text by using the Content Panel or by copy/pasting from Acrobat (Pro) to some other document. By contrast the following bfrange operator does allow the text extraction to work as intended:

[srcCode1 srcCode2 dstString]
03FE 03FF 0035

Notice that no overflow exists, and as such the requirements of the specification are met.

I have put together a proposed solution [here|https://github.com/ryanjackson-wf/pdfbox/pull/1] in my fork of the PDFBox GH mirror.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Mon Mar 21 06:57:29 UTC 2022,,,,,,,,,,"0|z10gkw:",9223372036854775807,,,,,,,,,,,,,,,,,,,"14/Mar/22 14:27;ryan.jackson;I do have some sample PDF files that illustrate the bug but (while subset) they do contain a proprietary font so I need to check with our legal department before I can upload them to an otherwise public site such as this one.;;;","15/Mar/22 16:30;lehmi;Using the given sample range
{code}03FF 0400 0036{code}
the current implementation produces the following malformed mapping
{code}
1 beginbfrange
<03FF> <0400> <0036>
endbfrange
{code}
The proposed code looks promising and produces the following correct mapping
{code}
2 beginbfrange
<03FF> <03FF> <0036>
<0400> <0400> <0037>
endbfrange
{code}


;;;","18/Mar/22 06:42;jira-bot;Commit 1899025 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1899025 ]

PDFBOX-5387: fix overflow detection when writing bfrange entries as proposed by Ryan Jackson;;;","18/Mar/22 06:42;jira-bot;Commit 1899026 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1899026 ]

PDFBOX-5387: fix overflow detection when writing bfrange entries as proposed by Ryan Jackson;;;","18/Mar/22 06:50;lehmi;I've committed your fix as is and added some more tests to check the output itself.

[~ryan.jackson]  There was comment in the test code about the need to discuss about surrogates. Is there any issue left?;;;","18/Mar/22 14:33;ryan.jackson;[~lehmi] 

Thank you for asking. I meant to add a couple other notes to this ticket but failed to do so. Here are the two outstanding things in my mind:
 # Technically we might consider using the {{bfchar}} operator instead of {{bfrange}} when the logic allows only one element (in what would otherwise be a range). That would be a small optimization. In my investigation of this issue, I found that (for the small sample document I used - just using a few numbers - so not representative of a ""real"" document), Adobe Acrobat (Pro) uses {{bfchar}}. Apparently it must favor {{bfchar}} for small subsets.
# With regard to UTF-16 supplementary characters, I am *not* certain that the existing code (copied below; see {{allowDestinationRange}}) actually does what we want:

{code:java}
// Allow the new destination string if:
// 1. It is sequential with the previous one and differs only in the low-order byte
// 2. The previous string does not contain any UTF-16 surrogates
return allowCodeRange(prevCode, nextCode) && prev.codePointCount(0, prev.length()) == 1;
{code}

Notice that the call to {{String.codePointCount}} is essentially unchanged from before. My question however (and what I was trying to get at through the unit tests and that ""TODO"" comment) is whether or not that is actually giving you a count of the surrogate pairs. If you ask for the number of Unicode code points (essentially UTF-32) for the entire length of the string, I'd expect the count to always be ""one"", unless somehow the string represents more than one visible character (golang {{rune}}). I don't know the overall code well enough to say how it is called in these cases.

The last question I have is whether or not I may have violated an assumption of my own in {{allowCodeRange}} (which assumes 16-bit values) by calling it from {{allowDestinationRange}} with values potentially greater than 16-bit (the code point should reflect UTF-32).

I apologize that I did not mention these questions earlier, but I am glad that we can discuss them and make any changes if necessary.;;;","18/Mar/22 19:11;ryan.jackson;I did a bit of reading concerning the {{String.codePointCount}} method and the Java [documentation|https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#codePointCount(int,int)] (Java 11) states the following:

""Returns the number of Unicode code points in the specified text range of this String. The text range begins at the specified beginIndex and extends to the char at index endIndex - 1. Thus the length (in chars) of the text range is endIndex-beginIndex. Unpaired surrogates within the text range count as one code point each.""

So the existing test does guard against unpaired surrogates which would be appropriate. I'd have to think about and study how surrogate pairs are formed in UTF-16 in order to be able to comment on whether or not the regular PDF algorithm (""increment low byte by one"") may safely work here. I know little of the PDF 1.5 specification as it applies to surrogate pairs.

This MS [article|https://docs.microsoft.com/en-us/windows/win32/intl/surrogates-and-supplementary-characters] on UTF-16 may also be helpful, but I'm sure you are already familiar with the topic.;;;","19/Mar/22 17:01;lehmi;i try to answer your questions AFAIU the topic
{quote}
Technically we might consider using the {{bfchar}} operator instead of {{bfrange}} when the logic allows only one element (in what would otherwise be a range). That would be a small optimization. In my investigation of this issue, I found that (for the small sample document I used - just using a few numbers - so not representative of a ""real"" document), Adobe Acrobat (Pro) uses {{bfchar}}. Apparently it must favor {{bfchar}} for small subsets
{quote}
We could do that, but that would require a little refactoring as all of the bfchar entries have to be added in front of the bfrange entries. I'm not sure if the benefit is that much. However, we should open a new ticket if someone want to follow on this

{quote}
With regard to UTF-16 supplementary characters, I am not certain that the existing code (copied below; see allowDestinationRange) actually does what we want:
{quote}
We don't have to care about the conversion of out of range values into surrogates as this is done automatically when creating the string as the internal representation of a string in UTF-16BE based. We have to care about the length of the string as it is allowed to map a cid to more than one codepoint, e.g. to ligatures such as ""ff"". Saying that, the check of the length does make sense.

{quote}
The last question I have is whether or not I may have violated an assumption of my own in allowCodeRange (which assumes 16-bit values) by calling it from allowDestinationRange with values potentially greater than 16-bit (the code point should reflect UTF-32).
{quote}
{{allowCodeRange}} uses the CID values as input and those are definitely 16bit values.

{quote}
I apologize that I did not mention these questions earlier, but I am glad that we can discuss them and make any changes if necessary
{quote}
There is absolutely no need to apologize, on the contrary. You have found a not that obvious issue, have filed a ticket with a detailed analysis and have provided a working solution as well. IMHO that's an outstanding example for a code contribution, we have to thank you.
;;;","19/Mar/22 18:49;ryan.jackson;Thank you [~lehmi].

It sounds then like the code as it currently stands is what we want. With regard to the unit tests, I wasn't sure how to introduce an unpaired surrogate such that we can test the value returned from {{codePointCount}}. If you know of a way then we can add an assertion for that case. Would a ligature be one way to do so?
;;;","20/Mar/22 11:59;jira-bot;Commit 1899083 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1899083 ]

PDFBOX-5387: add some more tests for multi char mappings such as ligatures;;;","20/Mar/22 11:59;jira-bot;Commit 1899084 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1899084 ]

PDFBOX-5387: add some more tests for multi char mappings such as ligatures;;;","20/Mar/22 12:01;lehmi;[~ryan.jackson] Good idea, I've added some tests for mutli char mappings such as ligatures. I guess we are done here. Thanks for your contributrion!;;;","21/Mar/22 06:57;jira-bot;Commit 1899099 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1899099 ]

PDFBOX-5387: sonar fix;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong image generated,PDFBOX-5386,13433216,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Not A Problem,,medmedin2014,medmedin2014,10/Mar/22 21:46,13/Mar/22 22:55,07/May/23 20:06,13/Mar/22 22:55,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Rendering,,,,0,,,,"Only the cover of the pdf which has yellow color is wrongly converted to BufferedImage

!Screenshot_20220310_223538.png!",,,,,,,,,,,,,"10/Mar/22 21:46;medmedin2014;Screenshot_20220310_223538.png;https://issues.apache.org/jira/secure/attachment/13040945/Screenshot_20220310_223538.png","11/Mar/22 09:02;medmedin2014;cover.pdf;https://issues.apache.org/jira/secure/attachment/13040988/cover.pdf","11/Mar/22 16:16;tilman;screenshot-1.png;https://issues.apache.org/jira/secure/attachment/13041004/screenshot-1.png",,,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sun Mar 13 22:53:57 UTC 2022,,,,,,,,,,"0|z10duw:",9223372036854775807,,,,,,,,,,,,,,,,,,,"11/Mar/22 03:01;tilman;Please attach the PDF. If it is too big (maybe because it is a book), attach the first page only, use the PDFSplit utility from the pdfbox-app command line tool. 
https://pdfbox.apache.org/2.0/commandline.html;;;","11/Mar/22 16:17;tilman;It works for me in PDFDebugger:
 !screenshot-1.png! 
;;;","11/Mar/22 17:43;mkl;Actually the appearance of the screen shot with the error reminds me of images with transmission errors, in particular the sudden switch of colors in the middle of a line and then a shift of the image content.;;;","11/Mar/22 18:25;tilman;Yeah, the early internet days 😂.

The rendering doesn't look like the usual transparency / masks errors that we have.

[~medmedin2014] please tell how you got the image that you attached. Do you also get the effect if you use PDFDebugger or PDFToImage ?
;;;","13/Mar/22 22:53;medmedin2014;Sorry for the disturbance, in fact I rearranged my whole code in these two days to isolate the real cause of the problem and the irony is that the culprit was both my messy code and JDK due to [an old bug|https://bugs.java.com/bugdatabase/view_bug.do?bug_id=8081474] in SwingWorker where done method could be called in certain cases before doInBackground finishes all its tasks.

Many thanks for your responses.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong glyphs used,PDFBOX-5384,13431596,Bug,Open,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,,,Schmidor,Schmidor,02/Mar/22 22:48,20/Mar/22 12:29,07/May/23 20:06,,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Rendering,,,,0,regression,,,"The attached PDF uses Tahoma fonts.
It seems the correct font is used, but it uses the wrong glyphs.
For example the ""6"" from the screenshot is definitely from Tahoma Glyph 25 / CID 54, where it should be ""S"" Glyph 54 / CID 83.
The ""="" in screenshot is Glyph 32 CID 61 where ""Z"" Glyph 61 CID 90 should be used.
 !image-2022-03-02-23-41-15-844.png! ",,,,,,,,,,,,,"02/Mar/22 22:40;Schmidor;DOR-EC E-N20_118345.pdf;https://issues.apache.org/jira/secure/attachment/13040663/DOR-EC+E-N20_118345.pdf","02/Mar/22 22:41;Schmidor;image-2022-03-02-23-41-15-844.png;https://issues.apache.org/jira/secure/attachment/13040662/image-2022-03-02-23-41-15-844.png",,,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat Mar 12 10:34:10 UTC 2022,,,,,,,,,,"0|z103w8:",9223372036854775807,,,,,,,,,,,,,,,,,,,"03/Mar/22 03:40;tilman;This worked with 2.0.11, and no longer with 2.0.12 😠
Thus ""it"" happened between 28.6.2018 and 4.10.2018.;;;","03/Mar/22 10:31;Schmidor;In this case, tried a bisect and found the difference :)
https://svn.apache.org/viewvc/pdfbox/branches/2.0/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?r1=1842132&r2=1842131&pathrev=1842132
So, might be in the PDF it is not a Identity map as the name claims?;;;","03/Mar/22 18:09;tilman;Thanks!

Yes, I think that cmap claims to be identity, but isn't, which undermines our strategy.

I tried replacing {{!toUnicodeCMap.hasUnicodeMappings()}} with {{{}(!toUnicodeCMap.hasUnicodeMappings() && !toUnicodeCMap.hasCIDMappings()){}}}.

Now the file PDFBOX-4322-Empty-ToUnicode-reduced.pdf fails text extraction, (""Justin"") is missing.;;;","04/Mar/22 07:16;lehmi;In theory the toUnicode mapping isn't involved at all when it comes to rendering. It is used for text extraction only.

The given pdf is broken in a couple of ways
* it uses CID type 2 fonts but doesn't embed them
* it claims to use an identity mapping but doesn't
* the toUnicode CMap is named as identity map but it isn't
* the toUnicode CMap doesn't contain any toUnicode mappings
* the toUnicode CMap contains CID-mappings only
* UPDATE: the CMap is malformed as the cidrange isn't segmented in blocks of 100 lines

There are many workarounds in place to handle malformed pdfs and in the given case the toUnicode mapping is involved. Obviously the added one from PDFBOX-4322 broke the rendering of this one. Maybe there is a way to support both
;;;","10/Mar/22 22:19;Schmidor;What about handling it here, in codeToGID:
{code:java}
--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java
@@ -253,7 +253,7 @@ public class PDCIDFontType2 extends PDCIDFont
             else
             {
                 // fallback to the ToUnicode CMap, test with PDFBOX-1422 and PDFBOX-2560
-                String unicode = parent.toUnicode(code);
+                String unicode = parent.getCMap().hasUnicodeMappings() ? parent.toUnicode(code) : null;
                 if (unicode == null)
                 {
                     if (!noMapping.contains(code))
{code}
The old implementation before the fix for PDFBOX-4322 returned ""null"" as there was no unicode mapping, what then caused falling through to codeToCID at this method.;;;","12/Mar/22 10:17;tilman;This change doesn't improve the text extraction, and fails the rendering for gs-bugzilla693663-p9.pdf, ICEPDF-432.pdf, PDFBOX-1658.pdf, PDFBOX-2563.pdf, PDFBOX-2950.pdf, PDFBOX-3120-127166-p5.pdf, PDFBOX-5090_reduced.pdf, PDFBOX-5228.pdf, PDFBOX-5283.pdf, PDFBOX-5283.pdf and PDFJS-10699.pdf.;;;","12/Mar/22 10:34;lehmi;It looks a little bit like PDFBOX-5283. We have two workarounds which seem not to be compatible, but maybe there is a way ...;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JAVA program Crashes,PDFBOX-5383,13431188,Bug,Open,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,,,krishnakittu528,krishnakittu528,01/Mar/22 09:38,03/Mar/22 19:33,07/May/23 20:06,,2.0.24,2.0.25,3.0.0 PDFBox,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Rendering,,,,0,crash,jdk8,,I am trying to convert the PDF into images by using render. It hangs up the program.,,,,,,,,,,,,,"01/Mar/22 09:37;krishnakittu528;crash.pdf;https://issues.apache.org/jira/secure/attachment/13040566/crash.pdf",,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Mar 02 17:58:42 UTC 2022,,,,,,,,,,"0|z101e8:",9223372036854775807,,,,,,,,,,,,,,,,,,,"01/Mar/22 18:09;tilman;Works for me, takes about a second with PDFDebugger. Your text is unclear, does java ""crash"" (stop with error) or ""hang"" (do nothing forever, at 0% or 100% CPU)?

Make sure you're using the latest java of the version you're using (if jdk8, it would be 322).;;;","02/Mar/22 05:52;krishnakittu528;HI 

When i tries with the below sample problem, the java process itself crashes.

{code}
package pdfboxutil;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.PDFRenderer;

public class Crash {

    public static void main(String[] args) throws IOException {
        PDDocument document = PDDocument.load(new File(""D:\\Development\\crash.pdf""));
        PDFRenderer pdfRenderer = new PDFRenderer(document);
        int count = document.getNumberOfPages();
        for (int i = 0; i < count; i++) {
            BufferedImage image = pdfRenderer.renderImage(i);
            System.out.println(""Processed"");
        }
       
    }
}
{code}

I am using JAVA 1.8.0_321, and pdf version 2.0.25. And in eclipse IDE i got this message

<terminated, exit value: -1073741571>C:\Program Files\Java\jdk1.8.0_321\bin\javaw.exe (Mar 2, 2022 11:21:36 AM)    

 ;;;","02/Mar/22 07:16;tilman;Does it work with other files or only fail with that one?

Try also allocating more space (e.g. -Xmx1g ). Try also running it outside of eclipse.

This exit code is mentioned in connection with eclipse and C code, very weird
https://stackoverflow.com/questions/59041409/termination-error-in-eclipse-when-trying-to-process-large-array
https://stackoverflow.com/questions/61581389/getting-exit-value-1-073-741-571-with-simple-code-to-calculate-nth-moment
;;;","02/Mar/22 09:01;krishnakittu528;HI tilman,

Thanks for replying

Its confirmed that on JAVA8 its not working even with the latest update 321 as well. On JAVA 11 its working fine. Is there any way to run with JAVA8.

I will keep on posted for further updates.

 

FYI only the attached sample is not working;;;","02/Mar/22 16:05;tilman;I could reproduce it with oracle jdk321 (I was using amazon coretto 322). Here's the code to crash it, which I created based on the PDF:
{code}
BufferedImage bim = new BufferedImage(1000, 1000, BufferedImage.TYPE_INT_RGB);
GeneralPath path = new GeneralPath();
path.moveTo(-66781511.559, -2226.299);
path.curveTo(-66781508.692,-2225.888,-66781505.846,-2225.346,-66781503.029,-2224.675);
Graphics2D g = (Graphics2D) bim.getGraphics();
g.setStroke(new BasicStroke(0.28f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 10, new float[]{5.669f,5.669f}, 0f));
g.draw(path);
{code}
The PDF segment is
{noformat}
0.283 w
0 J
0 j
[ 5.669 5.669 ] 0 d
/GS0 gs
-6.6781512E7 -2226.299 m
-6.6781508E7 -2225.888 -6.6781504E7 -2225.346 -6.6781504E7 -2224.675 c
S
{noformat}
I have submitted a bug report to oracle, it has been accepted as [JDK-8282587|https://bugs.openjdk.java.net/browse/JDK-8282587]. Do not expect them to fix this within a few days. You should move to amazon corretto or to jdk11. Sorry for the bad news but thanks for reporting it!;;;","02/Mar/22 17:58;mkl;{quote}
The PDF segment is
{noformat}
-6.6781512E7 -2226.299 m
-6.6781508E7 -2225.888 -6.6781504E7 -2225.346 -6.6781504E7 -2224.675 c
{noformat}
{quote}

So the PDF document is broken after all, the PDF format does not support exponential forms for numbers.


{panel:title=ISO 32000-2 section 7.3.3 ""Numeric objects""}
A real value shall be written as one or more decimal digits with an optional sign and a leading, trailing, or embedded PERIOD (2Eh) (decimal point).
[...]
A PDF writer shall not use the PostScript language syntax for numbers with non-decimal radices (such as 16#FFFE) or in exponential format (such as 6.02E23).
{panel}

----

Ah, I have to correct myself, not the PDF document is invalid but the quote from it. Actually those lines are:

{noformat}
-66781511.559 -2226.299 m
-66781508.692 -2225.888 -66781505.846 -2225.346 -66781503.029 -2224.675 c 
{noformat}

Here the numbers are valid PDF numbers.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Slow rendering due to rescaling,PDFBOX-5378,13429160,Bug,Open,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,,,Schmidor,Schmidor,17/Feb/22 17:17,18/Feb/22 14:44,07/May/23 20:06,,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,"Due to changes for better image quality when images are scaled down in [https://svn.apache.org/viewvc/pdfbox/branches/2.0/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java?r1=1877290&r2=1877289&pathrev=1877290] the attached PDF renders much slower.

I propose to replace image.gerScaledInstance by
{code:java}
public BufferedImage getRescaledImage( BufferedImage image, int w, int h ) throws IOException {
 float scaleW = w / (( float )image.getWidth());
 float scaleH = h / (( float )image.getHeight());
 if(scaleW < .5f || scaleH < .5f){
  int nextW = scaleW <.5f ? ( int )Math.ceil( image.getWidth() / 2.0 ) : w;
  int nextH = scaleH <.5f ? ( int )Math.ceil( image.getHeight() / 2.0 ) : h;
  image = getRescaledImage( image, nextW, nextH );
 }
 int type = (image.getTransparency() == Transparency.OPAQUE) ?  BufferedImage.TYPE_INT_RGB
 : BufferedImage.TYPE_INT_ARGB;
 BufferedImage scaled = new BufferedImage( w, h, type );
 Graphics2D g = scaled.createGraphics();
 g.setRenderingHint( RenderingHints.KEY_INTERPOLATION,  RenderingHints.VALUE_INTERPOLATION_BILINEAR );
 g.drawImage( image, 0, 0, w, h, null );
 return scaled;
}{code}

While this implementations seems to be a bit slower than getScaledInstance, the  call to graphics.drawImage with the resulting BufferedImage seems to be significantly faster than drawing the ToolkitImage.",,,,,,,,,,,,PDFBOX-4516,"17/Feb/22 18:59;tilman;PDFBOX-4516-new.png;https://issues.apache.org/jira/secure/attachment/13040202/PDFBOX-4516-new.png","17/Feb/22 18:59;tilman;PDFBOX-4516-old.png;https://issues.apache.org/jira/secure/attachment/13040203/PDFBOX-4516-old.png","17/Feb/22 16:51;Schmidor;Test_2.pdf;https://issues.apache.org/jira/secure/attachment/13040200/Test_2.pdf",,,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Feb 18 11:36:28 UTC 2022,,,,,,,,,,"0|z0zoyg:",9223372036854775807,,,,,,,,,,,,,,,,,,,"17/Feb/22 18:59;tilman;The quality goes down with the change.;;;","17/Feb/22 21:50;Schmidor;Crap, it was missing the second iteration for < 0.25. 
Corrected it doesn't help as I have hoped.
{code:java}
  int nextW = scaleW <.5f ? 2*w  : w;
  int nextH = scaleH <.5f ? 2*h : h;
{code}
;;;","18/Feb/22 04:23;tilman;I don't understand, is this a corrected code (how?) or are you giving up on this one?;;;","18/Feb/22 11:36;Schmidor;The condition for rescaling was wrong, so there was no recursion as intended:
{code:java}
public BufferedImage getRescaledImage( BufferedImage image, int w, int h ) throws IOException {
 float scaleW = w / (( float )image.getWidth());
 float scaleH = h / (( float )image.getHeight());
 if(scaleW < .5f || scaleH < .5f){
  int nextW = scaleW <.5f ? 2* w : w;
  int nextH = scaleH <.5f ? 2 *h : h;
  image = getRescaledImage( image, nextW, nextH );
 }
 int type = (image.getTransparency() == Transparency.OPAQUE) ?  BufferedImage.TYPE_INT_RGB
 : BufferedImage.TYPE_INT_ARGB;
 BufferedImage scaled = new BufferedImage( w, h, type );
 Graphics2D g = scaled.createGraphics();
 g.setRenderingHint( RenderingHints.KEY_INTERPOLATION,  RenderingHints.VALUE_INTERPOLATION_BILINEAR );
 g.drawImage( image, 0, 0, w, h, null );
 return scaled;
}
{code}
Unfortunately it seems that approch doesn't seem to be faster. So rendering this PDF is still to slow.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pDAcroForm.flatten() does not remove /SigFlags in /Catalog object,PDFBOX-5377,13428583,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Critical,Fixed,tilman,SGE00,SGE00,15/Feb/22 14:10,21/Apr/22 15:38,07/May/23 20:06,16/Feb/22 17:24,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.26,3.0.0 PDFBox,,AcroForm,,,,1,,,,"A PDF document contains Signature fields (X.509) with /SigFlags 1 indication in the /Catalog object.

When the document is flattened, this signature image remains in the document and underlying object is removed. Perfect!

But the SigFlags in /Catalog object is not removed although this has no value anymore and prevent the document being correct signed/certifiied afterwards (at least with our software).

Can the SigFlags in /Catalog object be removed or its value be changed to 0 so this corresponds to the content of the document ?

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,Java,Wed Feb 16 17:24:30 UTC 2022,,,,,,,,,,"0|z0zlfc:",9223372036854775807,,,,,,,,,,,,,,,,,,,"15/Feb/22 15:05;mkl;{quote}Can the SigFlags in /Catalog object be removed or its value be changed to 0 so this corresponds to the content of the document ?{quote}

*SigFlags* in the *Catalog* are meaningless. The relevant *SigFlags* entry is the one in the interactive form dictionary, i.e. in the *AcroForm* dictionary in the *Catalog*.;;;","15/Feb/22 18:15;jira-bot;Commit 1898110 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1898110 ]

PDFBOX-5377: remove sigFlags when there is no signature, as suggested by Stefan Geelen;;;","15/Feb/22 18:15;jira-bot;Commit 1898111 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1898111 ]

PDFBOX-5377: remove sigFlags when there is no signature, as suggested by Stefan Geelen;;;","15/Feb/22 18:44;tilman;Please try a snapshot:
https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/2.0.26-SNAPSHOT/;;;","16/Feb/22 11:35;SGE00;Thx for the snapshot! Works as expected!;;;","16/Feb/22 17:24;tilman;Thanks for the feedback!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Image interpolation when there shouldn't be,PDFBOX-5376,13428397,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Minor,Fixed,tilman,tilman,tilman,14/Feb/22 18:07,21/Apr/22 15:38,07/May/23 20:06,14/Feb/22 18:08,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.26,3.0.0 PDFBox,,Rendering,,,,0,,,,"Two elements in the rendering of this file (by Kurt Pfeifle)
https://github.com/angea/PDF101/blob/master/handcoded/111_current-transformation-matrix-ctm.pdf
look like shadings but they are not, it's a tiny image. The cause is a miscalculation of {{isScaledUp}} which didn't take into account that {{getScalingFactorX()}} / {{getScalingFactorY()}} may return negative values.

Rendering after the change has mostly invisible differences except for PATTYP2.pdf where they are easier to see.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Feb 15 18:38:10 UTC 2022,,,,,,,,,,"0|z0zka0:",9223372036854775807,,,,,,,,,,,,,,,,,,,"14/Feb/22 18:08;jira-bot;Commit 1898078 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1898078 ]

PDFBOX-5376: use absolutes;;;","14/Feb/22 18:08;jira-bot;Commit 1898079 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1898079 ]

PDFBOX-5376: use absolutes;;;","15/Feb/22 18:38;jira-bot;Commit 1898114 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1898114 ]

PDFBOX-5376: use getScalingFactor instead of getScale to get correct behavior for rotated images;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow creating of PDFXObjectImage without accessing to the image stream,PDFBOX-5375,13428351,Bug,Open,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,,,tledouxfr@yahoo.fr,tledouxfr@yahoo.fr,14/Feb/22 14:52,12/Mar/22 12:15,07/May/23 20:06,,2.0.25,3.0.0 PDFBox,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,PDModel,,,,0,,,,"Currently, when a PDF embeds JPEG2000 images, the simple parsing of the file generates a warning
when the code hits a call to getXObject(name) from a PDResources for a image without creating the
underlining PDFXObjectImage object, related to the absence of the JAI third-party.

However, when we just want to access the width or height propertis (which are defined outside the stream in the associated dictionnary).

Looking at the constructor of PDFXObjectImage, it appears that the image is always read to retrieve the colorspace.
The proposed patch is moved this initialization to the getColorSpace() method so that the object is created and the Exception will be raised only if the image needs to be really accessed.",,,,,,,,,,,,,"14/Feb/22 14:53;tledouxfr@yahoo.fr;patch.txt;https://issues.apache.org/jira/secure/attachment/13039993/patch.txt","15/Feb/22 09:32;tledouxfr@yahoo.fr;patch2.txt;https://issues.apache.org/jira/secure/attachment/13040030/patch2.txt",,,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sat Mar 12 12:15:19 UTC 2022,,,,,,,,,,"0|z0zjzs:",9223372036854775807,,,,,,,,,,,,,,,,,,,"14/Feb/22 18:59;tilman;This brings a wrong rendering for the file here
https://github.com/mozilla/pdf.js/issues/9650
and for the (confidential) image of PDFBOX-1735.

It's not totally unexpected, your change expects that people call {{getColorSpace()}}. So the change fails as soon as an operation accesses the object without doing that. The PR text at the end of the linked page explains the problem. JPEG2000 is a real pain in PDF.;;;","15/Feb/22 09:33;tledouxfr@yahoo.fr;First, thanks a lot for looking at my issue.

IMHO the file is badly build and should be ignore, but I DO acknowledge that pdfbox can be used as a repair tool and needs to be able to deal with such files.

In order to be able to used the PDFXObjectImage even when the ImagingReader is not here, I propose another way (see patch2) of handling it: just catch the exception (with a warning) to allow for the objectto be created. I don't add a boolean flag but this can be added if need be.

Does it seem more compatible with the other use cases ?;;;","16/Feb/22 17:29;tilman;I'm not convinced by this; IMHO the current attitude in software development is that failures should be handled with exceptions, not with return codes. There are a few cases were we don't respect this rule (e.g. broken fonts), we shouldn't add more. Why don't you add the decoder? Is this SO question from you / is this from somebody in your team?
https://stackoverflow.com/questions/71067444/is-there-an-alternative-to-jai-imageio-for-pdfbox

If you don't trust the library, the source code of the JPEG2000 decoder is available:
https://github.com/jai-imageio/jai-imageio-jpeg2000;;;","16/Feb/22 18:17;tledouxfr@yahoo.fr;My bad. I definitely should have explain my use case better first.

What I want to do is retrieve the dimensions of all the images of a PDF as efficiently as possible. In particular, I don't want to decode the image for that (because this is a lot of processing).

My last blog better explains the case: [https://openpreservation.org/blogs/scanned-vs-native-pdfs-how-to-differentiate-them/]

I manage to get around it but the code is quite weird. Try to port it to tika would require a better handling of all cases (even when we don't have the image decoder).

Hope this explains my needs better. ;;;","16/Feb/22 20:08;tilman;Yes it does... how about get the image dictionary the hard way from the resource dictionary, then accessing the height and width entries. Or is that what you already did, re: ""I manage to get around it but the code is quite weird""?

After writing this, I looked into your code and found this:
https://github.com/tledoux/scannedPdf/blob/main/src/main/java/fr/bnf/toolslab/AbstractScanDetector.java

""lookupImage"" is what I thought about, I don't think it's weird.;;;","17/Feb/22 06:43;lehmi;I agree with Tilman. 

How about reducing the constructor to detect a possible JPX filter and storing the information in a private boolean member. Once the colorspace is needed it could be extracted from the stream using the removed constructor code. ;;;","17/Feb/22 13:45;tledouxfr@yahoo.fr;Hi Andreas and Tilman,

indeed my only need is that the constructor doesn't decode the image in an unexpected way.

The implementation I made was possible only because I was able to access the code (the beauty of open source !!!) and I could retro-engineer how the PDFXObjectImage  was build. From a user of pdfbox, it seems to me that a lot to learn on the interns of the library.

Moreover, I'm trying to reimplement the algorithm using the contentstream classes and having the same problem I seems lilke I will have to redefine a PDImage implementation as well as another DrawObject operator.

So the idea of having a constructor that just detect the JPX filter would be a great improvement.;;;","12/Mar/22 11:12;lehmi;How about something like this
{code}
### Eclipse Workspace Patch 1.0
#P pdfbox
Index: src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java
===================================================================
--- src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java	(Revision 1898440)
+++ src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java	(Arbeitskopie)
@@ -79,6 +79,8 @@
 
     // initialize to MAX_VALUE as we prefer lower subsampling when keeping/replacing cache.
     private int cachedImageSubsampling = Integer.MAX_VALUE;
+    // indicates wether this image has an JPX-based filter applied
+    private boolean hasJPXFilter = false;
 
     /**
      * current resource dictionary (has color spaces)
@@ -142,12 +144,7 @@
         List<COSName> filters = stream.getFilters();
         if (!filters.isEmpty() && COSName.JPX_DECODE.equals(filters.get(filters.size() - 1)))
         {
-            try (COSInputStream is = stream.createInputStream())
-            {
-                DecodeResult decodeResult = is.getDecodeResult();
-                stream.getCOSObject().addAll(decodeResult.getParameters());
-                this.colorSpace = decodeResult.getJPXColorSpace();
-            }
+            hasJPXFilter = true;
         }
     }
 
@@ -780,6 +777,17 @@
     {
         if (colorSpace == null)
         {
+            if (hasJPXFilter)
+            {
+                PDStream stream = getStream();
+                try (COSInputStream is = stream.createInputStream())
+                {
+                    DecodeResult decodeResult = is.getDecodeResult();
+                    stream.getCOSObject().addAll(decodeResult.getParameters());
+                    colorSpace = decodeResult.getJPXColorSpace();
+                    return colorSpace;
+                }
+            }
             COSBase cosBase = getCOSObject().getItem(COSName.COLORSPACE, COSName.CS);
             if (cosBase != null)
             {
{code};;;","12/Mar/22 11:42;tilman;This brings an NPE at SampleImageReader.java line 188 where {{colorSpace.getNumberOfComponents()}} is called. Happens e.g. with Ghent_PDF-Output-Test-V50_ALL_X4.pdf page 3.;;;","12/Mar/22 12:15;lehmi;Thanks for the quick check. Looks like we have to put some more effort into this.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in PDRange.getMin(),PDFBOX-5373,13427573,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Fixed,tilman,tilman,tilman,09/Feb/22 18:11,21/Apr/22 15:38,07/May/23 20:06,09/Feb/22 18:38,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.26,3.0.0 PDFBox,,Rendering,,,,0,,,,"{noformat}
NullPointerException: Cannot invoke ""org.apache.pdfbox.pdmodel.common.PDRange.getMin()"" because ""colRangeTab[n]"" is null
    org.apache.pdfbox.pdmodel.graphics.shading.PDTriangleBasedShadingType.readVertex(PDTriangleBasedShadingType.java:209)
    org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5.collectTriangles(PDShadingType5.java:121)
    org.apache.pdfbox.pdmodel.graphics.shading.Type5ShadingContext.<init>(Type5ShadingContext.java:54)
    org.apache.pdfbox.pdmodel.graphics.shading.Type5ShadingPaint.createContext(Type5ShadingPaint.java:61)
{noformat}",,,,,,,,,,,,,"09/Feb/22 18:11;tilman;POPPLER-1183.pdf;https://issues.apache.org/jira/secure/attachment/13039853/POPPLER-1183.pdf",,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,https://gitlab.freedesktop.org/poppler/poppler/-/issues/1183,,,,,,,,,,9223372036854775807,,,,Wed Feb 09 18:21:41 UTC 2022,,,,,,,,,,"0|z0zf6w:",9223372036854775807,,,,,,,,,,,,,,,,,,,"09/Feb/22 18:13;jira-bot;Commit 1897908 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897908 ]

PDFBOX-5373: avoid NullPointerException;;;","09/Feb/22 18:13;jira-bot;Commit 1897909 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897909 ]

PDFBOX-5373: avoid NullPointerException;;;","09/Feb/22 18:21;jira-bot;Commit 1897910 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897910 ]

PDFBOX-5373: avoid NullPointerException;;;","09/Feb/22 18:21;jira-bot;Commit 1897911 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897911 ]

PDFBOX-5373: avoid NullPointerException;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"*LOADS of* ""WARNING: key node000xxxxx already exists in destination IDTree""",PDFBOX-5372,13425753,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Fixed,tilman,nunop5,nunop5,31/Jan/22 10:41,13/May/22 06:09,07/May/23 20:06,19/Mar/22 12:41,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.26,3.0.0 PDFBox,,Utilities,,,,0,,,,"Hello,

I've been using PDFBox since very very long, and it's been working very well 👍

 

However, for 2 sets of PDFs I'm trying to merge in the past day, for some reason I'm always getting LOADS of these Warnings, with a ""out of memory"" crash at the end.

I believe (but could be wrong) that the ""out of memory"" is due to these endless Warnings.
(heap is currently 15g)

 

But, does anyone know what could be causing these warnings? (anything in specific you'd suggest me to look at, in these PDFs?)

 

Thank you very much!

 

(... LOADS of these, redacted ...)
Jan 31, 2022 2:41:48 AM org.apache.pdfbox.multipdf.PDFMergerUtility mergeIDTree
WARNING: key node00018714 already exists in destination IDTree
Jan 31, 2022 2:41:48 AM org.apache.pdfbox.multipdf.PDFMergerUtility mergeIDTree
WARNING: key node00018715 already exists in destination IDTree
Jan 31, 2022 2:41:48 AM org.apache.pdfbox.multipdf.PDFMergerUtility mergeIDTree
WARNING: key node00018716 already exists in destination IDTree
Jan 31, 2022 2:41:48 AM org.apache.pdfbox.multipdf.PDFMergerUtility mergeIDTree
WARNING: key node00018717 already exists in destination IDTree
Jan 31, 2022 2:41:48 AM org.apache.pdfbox.multipdf.PDFMergerUtility mergeIDTree
WARNING: key node00018718 already exists in destination IDTree
Exception in thread ""main"" java.lang.OutOfMemoryError: Java heap space
        at org.apache.pdfbox.io.ScratchFileBuffer.addPage(ScratchFileBuffer.java:132)
        at org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage(ScratchFileBuffer.java:184)
        at org.apache.pdfbox.io.ScratchFileBuffer.write(ScratchFileBuffer.java:236)
        at org.apache.pdfbox.io.RandomAccessOutputStream.write(RandomAccessOutputStream.java:46)
        at org.apache.pdfbox.cos.COSStream$2.write(COSStream.java:281)
        at org.apache.pdfbox.io.IOUtils.copy(IOUtils.java:70)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:127)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:109)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:146)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:146)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:146)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:109)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:117)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:146)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:109)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:117)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:146)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:109)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:117)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:146)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:109)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:146)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:109)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:146)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:109)
        at org.apache.pdfbox.multipdf.PDFCloneUtility.cloneForNewDocument(PDFCloneUtility.java:146)
        at org.apache.pdfbox.multipdf.PDFMergerUtility.appendDocument(PDFMergerUtility.java:800)
        at org.apache.pdfbox.multipdf.PDFMergerUtility.legacyMergeDocuments(PDFMergerUtility.java:459)
        at org.apache.pdfbox.multipdf.PDFMergerUtility.mergeDocuments(PDFMergerUtility.java:346)
        at org.apache.pdfbox.tools.PDFMerger.merge(PDFMerger.java:70)
        at org.apache.pdfbox.tools.PDFMerger.main(PDFMerger.java:49)
        at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:81)

 

–

 

EDIT - Increased the heap, and seems I got something new too:

 

Jan 31, 2022 10:50:46 AM org.apache.pdfbox.multipdf.PDFMergerUtility mergeIDTree
WARNING: key node00018714 already exists in destination IDTree
Jan 31, 2022 10:51:29 AM org.apache.pdfbox.cos.COSDocument finalize
*WARNING: Warning: You did not close a PDF Document*
Exception in thread ""main"" java.lang.OutOfMemoryError: Java heap space

 

Not sure if this means something is actually wrong with one of the PDFs, or a consequence of going out of memory.

(and how do I know what's the PDF it's referring to? :) )

I'm using Pupeteer to generate the PDFs, so I assume it generated them well... (also, it's consistently failing even if I re-generate all of them)",,,,,,,,,,,PDFBOX-5429,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Mar 16 18:44:44 UTC 2022,,,,,,,,,,"0|z0z42g:",9223372036854775807,,,,,,,,,,,,,,,,,,,"31/Jan/22 18:19;tilman;What PDFBox version are you using?

The name warning means that these names are in both files, so your result structure tree might be useless.;;;","01/Feb/22 09:49;nunop5;Hey - thanks for the reply.

Using the latest stable version.;;;","01/Feb/22 18:37;tilman;No idea without having the files. Either there's some sort of recursion (but these should be caught) or the file is really huge.;;;","22/Feb/22 17:30;jira-bot;Commit 1898324 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1898324 ]

PDFBOX-5372: check for recursion;;;","22/Feb/22 17:31;tilman;I wanted to close this but had a closer look at the line numbers. This is a stream dictionary that has a value that is an object reference, that references the dictionary itself. I don't see how we catch this. I'm adding a check, please test with a snapshot (at https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/2.0.26-SNAPSHOT/ );;;","05/Mar/22 03:43;jira-bot;Commit 1898615 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1898615 ]

PDFBOX-5372: check for recursion;;;","05/Mar/22 03:46;tilman;[~nunop5] please test your files again. You can use the command line tool.

https://pdfbox.apache.org/2.0/commandline.html#pdfmerger;;;","16/Mar/22 18:44;jira-bot;Commit 1898968 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1898968 ]

PDFBOX-5372: optimize, as suggested by Valery Bokov;;;","16/Mar/22 18:44;jira-bot;Commit 1898969 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1898969 ]

PDFBOX-5372: optimize, as suggested by Valery Bokov;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DeviceN/NChannel Seperation fails for rgb,PDFBOX-5370,13425148,Bug,Open,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,,,msahyoun,msahyoun,27/Jan/22 12:06,30/Jan/22 18:01,07/May/23 20:06,,2.0.25,2.0.26,3.0.0 PDFBox,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Rendering,,,,0,,,,"The files NChannel-xx.pdf use different color modes for separation which is described in chapter  10.8.3 of the PDF spec. The matching .bmp files show the expected results. The -1.BMP and -1.PNG files show the results generated by PDFBox trunk (2.0 is the same result). 

As can be seen the results for cmyk and Pantone are fine/close with the rgb rendering failing.

The PDFs and expected results have been provided by Hans Bärfuss, PDF Tools AG. Thank you for contributing the samples.",,,,,,,,,,,,,"27/Jan/22 12:02;msahyoun;NChannel-Pantone-1.BMP;https://issues.apache.org/jira/secure/attachment/13039409/NChannel-Pantone-1.BMP","27/Jan/22 12:02;msahyoun;NChannel-Pantone-1.PNG;https://issues.apache.org/jira/secure/attachment/13039408/NChannel-Pantone-1.PNG","27/Jan/22 12:02;msahyoun;NChannel-Pantone.bmp;https://issues.apache.org/jira/secure/attachment/13039413/NChannel-Pantone.bmp","27/Jan/22 12:01;msahyoun;NChannel-Pantone.pdf;https://issues.apache.org/jira/secure/attachment/13039417/NChannel-Pantone.pdf","27/Jan/22 12:02;msahyoun;NChannel-cmyk-1.BMP;https://issues.apache.org/jira/secure/attachment/13039411/NChannel-cmyk-1.BMP","27/Jan/22 12:02;msahyoun;NChannel-cmyk-1.PNG;https://issues.apache.org/jira/secure/attachment/13039410/NChannel-cmyk-1.PNG","27/Jan/22 12:02;msahyoun;NChannel-cmyk.bmp;https://issues.apache.org/jira/secure/attachment/13039414/NChannel-cmyk.bmp","27/Jan/22 12:01;msahyoun;NChannel-cmyk.pdf;https://issues.apache.org/jira/secure/attachment/13039415/NChannel-cmyk.pdf","27/Jan/22 12:02;msahyoun;NChannel-rgb-1.BMP;https://issues.apache.org/jira/secure/attachment/13039407/NChannel-rgb-1.BMP","27/Jan/22 12:02;msahyoun;NChannel-rgb-1.PNG;https://issues.apache.org/jira/secure/attachment/13039406/NChannel-rgb-1.PNG","27/Jan/22 12:02;msahyoun;NChannel-rgb.bmp;https://issues.apache.org/jira/secure/attachment/13039412/NChannel-rgb.bmp","27/Jan/22 12:01;msahyoun;NChannel-rgb.pdf;https://issues.apache.org/jira/secure/attachment/13039416/NChannel-rgb.pdf","30/Jan/22 12:46;tilman;NChannel-rgb2.pdf;https://issues.apache.org/jira/secure/attachment/13039527/NChannel-rgb2.pdf","30/Jan/22 12:36;lehmi;Patch_PDFBOX-5370.txt;https://issues.apache.org/jira/secure/attachment/13039525/Patch_PDFBOX-5370.txt","29/Jan/22 09:51;tilman;image-2022-01-29-10-51-18-421.png;https://issues.apache.org/jira/secure/attachment/13039508/image-2022-01-29-10-51-18-421.png","29/Jan/22 09:51;tilman;image-2022-01-29-10-51-44-286.png;https://issues.apache.org/jira/secure/attachment/13039509/image-2022-01-29-10-51-44-286.png","30/Jan/22 12:46;tilman;image-2022-01-30-13-46-16-080.png;https://issues.apache.org/jira/secure/attachment/13039526/image-2022-01-30-13-46-16-080.png",,17.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sun Jan 30 18:01:25 UTC 2022,,,,,,,,,,"0|z0z0dc:",9223372036854775807,,,,,,,,,,,,,,,,,,,"28/Jan/22 04:04;tilman;1.8 displays the RGB file properly?!;;;","28/Jan/22 04:45;tilman;I think 1.8 ""works"" because it uses tintTransform instead of NChannel.;;;","28/Jan/22 15:36;tilman;The problem is somehow in the calculations of {{PDDeviceN.toRGBWithAttributes(float[] value)}}
{code}
// multiply (blend mode)
rgbValue[0] *= rgbComponent[0];
rgbValue[1] *= rgbComponent[1];
rgbValue[2] *= rgbComponent[2];
{code}
if an element of {{rgbComponent}} is 0, then the result will be 0, and this will never change in future loops.

Btw {{toRGBWithAttributes(WritableRaster raster)}} is even worse, because the components of the left part are never initialized with 1.;;;","29/Jan/22 09:51;tilman;The PDF specification mentions that older viewers can ignore the NChannel: ""Conforming readers that do not support PDF 1.6 shall treat these colour spaces as normal DeviceN colour spaces and shall use the tint transformation function as appropriate."" So I tried to do this, and here's the result. Our rendering is different than Adobe. However the rendering of PDF.js, Chrome and ghostscript 9.27 are also similar to mine.
!image-2022-01-29-10-51-44-286.png!;;;","29/Jan/22 18:51;lehmi;Looks like your implementation uses the opposite order of the adobe implementation, the lightest colour is on the right (yours) vs. left (adobe) side.

I'm not sure if I understood the spec correct, but maybe inverting the colour values is the way to go:
{quote}
For DeviceN colour spaces that do not have a subtype of NChannel, 0.0 shall represent the minimum
amount of colorant; 1.0 shall represent the maximum. Tints shall always be treated as subtractive colours,
even if the device produces output for the designated component by an additive method. Thus, a tint value
of 0.0 shall denote the lightest colour that can be achieved with the given colorant, and 1.0 the darkest.
{quote}
;;;","29/Jan/22 19:21;tilman;""my"" implementation used the tinttransform function. I assume that Dr. Bärfuss did a ""poor"" tint transform on purpose to expose applications that don't implement NChannels 😂

I did play around a bit today, and remembered separation colors, 0 = white, 1 = ""that color"". So for red, 0 would be 1 1 1 (white) and 1 would be 1 0 0 (red). Medium red would be 1 0.5 0.5. The problem is how to combine two colors. Combining full red and blue, 1 0 0 and 0 0 1 would bring 0 0 0 (black) if multiplying. Adding would work here, but not for other combinations, e.g. 1 0.5 0.5 with 0.5 0.5 1.;;;","30/Jan/22 12:38;lehmi;[^Patch_PDFBOX-5370.txt] adds a special treatment for DeviceRGB colorspaces as those should be handled additive. It produces a similar result as adobe. WDYT?;;;","30/Jan/22 12:47;tilman;The third one is rather dark

!image-2022-01-30-13-46-16-080.png!

And I get only black when one of the two colors are 1, see attached file [^NChannel-rgb2.pdf];;;","30/Jan/22 14:34;lehmi;It was just a crazy idea, but it somehow targets two aspects of the issue. The one about the blending [~tilman] already mentioned earlier and the one about inverting the colour values in some or all cases;;;","30/Jan/22 14:44;msahyoun;To add a little context. The issues started when Hans Bärfuss approached me with him getting a different rendering than Adobe. There is some additional information I'd like to share:

Translated from German:
{quote}
The (PDFBox) results. RGB as an alternate colorspace are very rare for NChannel in the field. The explanation for the green color: I created the tint transform for the DeviceN color in a different color than the color of the different separations so one can see the differences in rendering engines as most rendering are only supporting deviceN but not NChannel.
{quote}

Please also see the part from ISO-32000-2 mentioned above (10.8.3)
{quote}
The results of the simulation should match those produced by the following steps:
a) Process the PDF as if separations were to be created for a simulated device that supports subtractive
process colourants and possibly spot colours. The PDF processor determines what process colours and
possible spot colours the simulated device is to have. A default DestOutputProfile, if available for a
subtractive device, or ColorantTable values, if available for a subtractive device, should be consulted to
determine the process colours to use (see 14.11.5, ""Output intents"").
b) Convert each separation into ""flat XYZ"" (no gamma) and using a background matte of all white.
c) Blend the resulting separations into a single result using a multiply blend (see ""Table 133 — Variables
used in the basic compositing formula"").
d) Convert the result to the actual device colour space and output it.
{quote}
Maybe that clarifies the expected processing to get the sample results;;;","30/Jan/22 14:50;msahyoun;[~tilman] [~lehmi]  are you refering to the processing sections in ISO 32000-1 or ISO 32000-2? They somewhat differ a little with 32000-2 being more specific.;;;","30/Jan/22 14:52;tilman;I was looking at 1.7 specification.;;;","30/Jan/22 18:01;lehmi;I was looking at the 1.7 spec as well;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PDFRenderer.renderImageWithDPI无限阻塞,PDFBOX-5367,13423505,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Blocker,Not A Bug,,2366597634@qq.com,2366597634@qq.com,19/Jan/22 12:38,25/Jan/22 18:24,07/May/23 20:06,25/Jan/22 18:24,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Rendering,,,,0,,,,"PDFRenderer.renderImageWithDPI无限阻塞,后续代码无法运行且没有任何异常信息,

2.0.25和3.0.0-alpha2都有该问题",,,,,,,,,,,,,"19/Jan/22 12:38;2366597634@qq.com;箱单.pdf;https://issues.apache.org/jira/secure/attachment/13039085/%E7%AE%B1%E5%8D%95.pdf",,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Jan 25 18:24:24 UTC 2022,,,,,,,,,,"0|z0yq9c:",9223372036854775807,,,,,,,,,,,,,,,,,,,"20/Jan/22 18:19;tilman;What happens? I can display the file quickly with PDFDebugger.;;;","25/Jan/22 18:24;tilman;Closing for inactivity. You're welcome to comment or reopen if you have more information.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unhandled IOException thrown from BaseParser creates issue in PDFStreamEngine.processStreamOperators,PDFBOX-5366,13423276,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Fixed,tilman,albanf,albanf,18/Jan/22 12:30,21/Apr/22 15:38,07/May/23 20:06,22/Jan/22 11:27,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.26,3.0.0 PDFBox,,,,,,0,,,,"We had a document where the fonts were listed in PDFDebugger under Page: 1 / Resources / Fonts, but not found during rendering.

The issue is a malformed Stream in a Form XObject, which is causing an exception that is not intercepted. Then the resources are not restored when the processing of the page continues after that XObject.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,Patch,,,,,,,,9223372036854775807,,,,Sat Jan 22 11:27:17 UTC 2022,,,,,,,,,,"0|z0youo:",9223372036854775807,,,,,,,,,,,,,,,,,,,"18/Jan/22 13:55;tilman;But that is the normal state, that the font is in the page resources. This is set in PDFStreamEngine.pushResources / popResources. If your file doesn't work, then I'd suspect that the problem is there somehow.;;;","18/Jan/22 14:59;tilman;Does the problem happen in PDFDebugger too? I'm asking because I wonder whether you'd doing anything ""special"".;;;","18/Jan/22 20:16;albanf;Hi, I looked more at the PDF and there is an incorrect stream in one of the Form, which causes an IOException, which is catched too late and screws up the push/pop mechanism.

I can suggest a fix:
{code:java}
private void processStreamOperators(PDContentStream contentStream) throws IOException {
    List<COSBase> arguments = new ArrayList<COSBase>();
    PDFStreamParser parser = new PDFStreamParser(contentStream);
    try {
        Object token = parser.parseNextToken();
        while (token != null) {
            if (token instanceof Operator) {
                processOperator((Operator) token, arguments);
                arguments.clear();
            } else {
                arguments.add((COSBase) token);
            }
            token = parser.parseNextToken();
        }
    } catch (IOException e) {
        LOG.warn(""Error while parsing stream, stopping processing"", e);
    }
}
 {code}
I will open another issue for the root cause of the parsing error.;;;","19/Jan/22 07:46;albanf;Here is the stream that's causing an issue, the array preceding the TJ operator is incorrectly formed, it has 2 [[:
{code:java}
0.400000  0.400000  0.400000 RG
0.400000  0.400000  0.400000 rg
BT
0.766272 0.642516 -0.642516 0.766272 311.82 767.81  Tm
0 Tc
/F1 12.00  Tf
0 Tr
1 w
[[(Z9C:A&""B0)]TJ
1 0 0 1 0 0 Tm
ET
0 0 0 rg
0 0 0 RG{code}
Here are the warnings, including the one logged by the catch I added:
{code:java}
 Warning  [BaseParser] Skipped unexpected dir object = 'TJ' at offset 174 (start offset: 172)
 Warning  [BaseParser] Corrupt array element at offset 174, start offset: 158
 Warning  [BaseParser] Skipped unexpected dir object = 'Tm' at offset 190 (start offset: 188)
 Warning  [BaseParser] Corrupt array element at offset 190, start offset: 158
 Warning  [BaseParser] Skipped unexpected dir object = 'ET' at offset 194 (start offset: 192)
 Warning  [BaseParser] Corrupt array element at offset 194, start offset: 158
 Warning  [BaseParser] Skipped unexpected dir object = 'rg' at offset 204 (start offset: 202)
 Warning  [BaseParser] Corrupt array element at offset 204, start offset: 158
 Warning  [PDFStreamEngine] Error while parsing next token, cannot continue processing stream
 java.io.IOException: object reference 0 0 R at offset 213 in content stream
    at org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool(BaseParser.java:186)
    at org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray(BaseParser.java:642)
    at org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken(PDFStreamParser.java:167)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:486)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:461)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.showForm(PDFStreamEngine.java:174)
    at org.apache.pdfbox.rendering.PageDrawer.showForm(PageDrawer.java:1558)
    at org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process(DrawObject.java:85)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator(PDFStreamEngine.java:853)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators(PDFStreamEngine.java:480)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processStream(PDFStreamEngine.java:461)
    at org.apache.pdfbox.contentstream.PDFStreamEngine.processPage(PDFStreamEngine.java:147)
    at org.apache.pdfbox.rendering.PageDrawer.drawPage(PageDrawer.java:282)
    at org.apache.pdfbox.rendering.PDFRenderer.renderImage(PDFRenderer.java:355)
    at org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:449)
    at org.apache.pdfbox.debugger.pagepane.PagePane$RenderWorker.doInBackground(PagePane.java:431)
    at javax.swing.SwingWorker$1.call(SwingWorker.java:295)
    at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
    at java.util.concurrent.FutureTask.run(FutureTask.java)
    at javax.swing.SwingWorker.run(SwingWorker.java:334)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    at java.lang.Thread.run(Thread.java:748){code}
Before the code change, the exception was intercepted at {{PDFStreamEngine.processOperator}} (line 9 of the stack), so the {{popResources}} and other state restore operations in {{PDFStreamEngine.processStream}} were not done correctly.

It could be better to add try/finally blocks around every call to {{PDFStreamEngine.processStreamOperators,}} at the places where resources are changed.;;;","19/Jan/22 17:08;tilman;Yes, a finally is what I also have in mind so that it gets cleaned up properly. It might take a few hours / days before I do it.;;;","19/Jan/22 18:37;jira-bot;Commit 1897214 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897214 ]

PDFBOX-5366: clean up after processing operators;;;","19/Jan/22 18:39;tilman;I made a small change for now and only in 2.0, please try it with PDFDebugger, it's here at the bottom of the page
https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-debugger/2.0.26-SNAPSHOT/

;;;","20/Jan/22 09:12;albanf;The text renders correctly after your change.;;;","22/Jan/22 03:58;jira-bot;Commit 1897313 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897313 ]

PDFBOX-5366: clean up after processing operators;;;","22/Jan/22 03:58;jira-bot;Commit 1897314 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897314 ]

PDFBOX-5366: clean up after processing operators;;;","22/Jan/22 11:27;tilman;Thanks for the feedback!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
（定位不对）location is bad,PDFBOX-5365,13422955,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Not A Bug,,dv,dv,17/Jan/22 05:45,19/Jan/22 08:25,07/May/23 20:06,18/Jan/22 08:24,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,文字定位不对，详细见附件,,,,,,,,,,,,,"17/Jan/22 05:45;dv;XyWordPDFTextStripper.java;https://issues.apache.org/jira/secure/attachment/13038899/XyWordPDFTextStripper.java","17/Jan/22 05:45;dv;XyWordTest.java;https://issues.apache.org/jira/secure/attachment/13038900/XyWordTest.java","17/Jan/22 09:12;dv;image-2022-01-17-17-12-29-608.png;https://issues.apache.org/jira/secure/attachment/13038927/image-2022-01-17-17-12-29-608.png","17/Jan/22 09:27;dv;image-2022-01-17-17-27-48-012.png;https://issues.apache.org/jira/secure/attachment/13038928/image-2022-01-17-17-27-48-012.png","18/Jan/22 05:03;dv;image-2022-01-18-13-03-10-824.png;https://issues.apache.org/jira/secure/attachment/13038976/image-2022-01-18-13-03-10-824.png","18/Jan/22 05:03;dv;image-2022-01-18-13-03-29-800.png;https://issues.apache.org/jira/secure/attachment/13038977/image-2022-01-18-13-03-29-800.png","17/Jan/22 07:27;tilman;screenshot-1.png;https://issues.apache.org/jira/secure/attachment/13038913/screenshot-1.png","17/Jan/22 05:40;dv;test.pdf;https://issues.apache.org/jira/secure/attachment/13038902/test.pdf","17/Jan/22 05:44;dv;test_wordFraming.pdf;https://issues.apache.org/jira/secure/attachment/13038901/test_wordFraming.pdf","18/Jan/22 05:08;dv;wordFraming-0.0.1-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/13038978/wordFraming-0.0.1-SNAPSHOT.jar",,,,,,,,,10.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,Java,Wed Jan 19 08:25:27 UTC 2022,,,,,,,,,,"0|z0ymvc:",9223372036854775807,,,,,,,,,,,,,,,,,,,"17/Jan/22 07:27;tilman;Likely a problem with the cropbox, at least in PDFDebugger. The other two boxes (cyan and blue) are at the correct position. I haven't tested DrawPrintTextLocations yet.
 !screenshot-1.png! ;;;","17/Jan/22 09:12;dv;请问你是怎么测试的，我换了颜色打框仍然不对（
 
 
How did you test it? I changed the color and framed it, but it's still wrong

 

）

我的控制台报了一个警告：（My console reported an warn:）

o.a.pdfbox.pdmodel.font.PDType0Font      : No Unicode mapping for CID+10 (10) in font UniversLTStd-Light-Identity-H

!image-2022-01-17-17-12-29-608.png!

!image-2022-01-17-17-27-48-012.png!;;;","17/Jan/22 10:25;mkl;See [this stack overflow answer|https://stackoverflow.com/a/46113333/1729265] - this is just another case of the excessive PDFBox {{PdfTextStripper}} coordinate normalization, a translation making the lower left corner of the crop box the origin is applied. Thus, you have to undo that normalization before using the coordinates for something else.;;;","17/Jan/22 18:19;tilman;Life is weird, I can't reproduce what happened this morning. Anyway, see the answer linked by mkl, or have a look at the DrawPrintTextLocations.java example.;;;","18/Jan/22 01:40;dv; 
 
Thank you for your answer

如果你没有复现这个问题，那我觉得可能是字体的原因，请问如何引入自定义字体 ， 或者能否给我提供（ UniversLTStd-Light）这个字体的字体包，If you don't reproduce this problem, I think it may be the reason for the font. How to introduce a custom font, or can you provide me with the font package of this font   -> （ UniversLTStd-Light）;;;","18/Jan/22 04:34;tilman;I do not get that font warning when doing text extraction. Also that font warning has nothing to do with the position, it just means you won't get unicode. This is often done on purpose from the creator of the PDF who does not want you to do text extraction.;;;","18/Jan/22 04:44;tilman;You can't replace the font in the PDF easily. That font is a subset of the actual font.

One thing you need to fix: replace
{code}
new PDPageContentStream(document, document.getPage(pageNum), PDPageContentStream.AppendMode.APPEND, true);
{code}
with
{code}
new PDPageContentStream(document, document.getPage(pageNum), PDPageContentStream.AppendMode.APPEND, true, true);
{code}
(see the javadoc why). This may not apply to this PDF, but may apply to a few others.;;;","18/Jan/22 05:04;dv;我刚刚试了下，还是不行，我换了个环境，将程序放到centos中跑，也是一样的情况（I just tried, but I still couldn't. I changed the environment and put the program into CentOS. The same is true）

 

有点崩溃，找不到问题所在（I'm a little broken. I can't find the problem）

!image-2022-01-18-13-03-10-824.png!

!image-2022-01-18-13-03-29-800.png!;;;","18/Jan/22 07:44;tilman;You need to adjust your coordinates for the cropbox. Call PDPage.getCropBox() and add the X and Y values to your rectangle coordinates.;;;","18/Jan/22 08:19;dv;（好的，我会再尝试下，不管结果如何，感谢 [~tilman] 和  [~mkl]  提供的帮助，当然我会继续查找原因）OK, I'll try again，Whatever the outcome，Thank Tilman hausherr and Michael Klink for their help，Of course, I will continue to find out why;;;","18/Jan/22 08:24;tilman;OK, I'm closing this, because it isn't a bug. (If the problem that I had in PDFDebugger 3.0 happens again then I'll fix it elsewhere)

This is more a how-to question now, which is better on the users mailing list or on stackoverflow.;;;","18/Jan/22 09:55;dv;（起始坐标重新定位了下，然后定位就准确了 ） The starting coordinates are repositioned, and then the positioning is accurate

再次感谢   Thanks again [~tilman] [~mkl] 

PDRectangle cropBox = document.getPage(i).getCropBox();
cropBox.setLowerLeftX(0);
cropBox.setLowerLeftY(0);
cropBox.setUpperRightX(document.getPage(i).getMediaBox().getWidth());
cropBox.setUpperRightY(document.getPage(i).getMediaBox().getHeight());;;;","18/Jan/22 09:56;dv;!image-2022-01-18-17-56-30-067.png!;;;","18/Jan/22 10:02;dv;document.getPage(i).setCropBox(cropBox);;;;","18/Jan/22 19:58;tilman;What I meant are the coordinates for the rectangles you're drawing. These should be adjusted. Changing the cropbox may bring unwanted effects.

Read about the cropbox in the PDF specification:
https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/PDF32000_2008.pdf;;;","19/Jan/22 08:25;dv;（好的我会再尝试下 ）OK, I'll try again;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Picture position accuracy problem,PDFBOX-5364,13422945,Bug,Open,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,,,lzy_1990,lzy_1990,17/Jan/22 03:54,27/Jan/22 19:03,07/May/23 20:06,,2.0.25,3.0.0 PDFBox,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Rendering,,,,0,,,,"* The image displayed is actually a combination of many images with a height of 1 pixel

 * However, after processing in pdfBox, some pictures seem to be missing.  The display in Adobe is correct 
 * Please see attached ""test1.pdf"" for the document. thanks~~

 

!image-2022-01-17-11-48-01-920.png!","windows, linux",,,,,,,,,,,,"17/Jan/22 03:48;lzy_1990;image-2022-01-17-11-48-01-920.png;https://issues.apache.org/jira/secure/attachment/13038892/image-2022-01-17-11-48-01-920.png","27/Jan/22 01:32;lzy_1990;image-2022-01-27-09-32-55-327.png;https://issues.apache.org/jira/secure/attachment/13039375/image-2022-01-27-09-32-55-327.png","17/Jan/22 03:51;lzy_1990;test1.pdf;https://issues.apache.org/jira/secure/attachment/13038891/test1.pdf",,,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Jan 27 19:03:28 UTC 2022,,,,,,,,,,"0|z0ymt4:",9223372036854775807,,,,,,,,,,,,,,,,,,,"17/Jan/22 07:23;tilman;likely a floating point math problem :-(

The rendering is less bad at a higher dpi, but the problem is still there.;;;","17/Jan/22 18:21;tilman;I played a bit with an uncompressed version... removing the clipping gets rid of the problem. (Each image has a clipping rectangle)
But of course we can't do that.
Another thing is the CTM. The values get messed up when converted to AffineTransform.
{noformat}
ctm: [130.32,0.0,0.0,0.72,232.56,797.28]
at:  AffineTransform[[130.32000732421875, 0.0, 232.55999755859375], [0.0, 0.72000002861023, 797.280029296875]]
{noformat}
changing Matrix.createAffineTransform() so that it uses Double.valueOf(String.valueOf(F)) fixes this (not very efficient, and looks terrible) but the problem doesn't go away. Inspiration: https://stackoverflow.com/a/61937328/535646
;;;","18/Jan/22 01:41;lzy_1990;Yesterday I also tried to remove the clipping, the picture can be displayed normally.  Of course not;;;","27/Jan/22 01:33;lzy_1990;I tried to use getBounds2D() of the Area, and found that the problem is displayed normally. I wonder if I can change it

Please kindly analyze whether this method is feasible，thanks~

!image-2022-01-27-09-32-55-327.png!;;;","27/Jan/22 03:40;tilman;No, because the clipping path isn't always a rectangle. So it would mean we have a bigger clipping area than intended. This improves your file (maybe java does some padding), but will worsen others. Try rendering this file:
https://issues.apache.org/jira/secure/attachment/12664565/Basiswissen-Vorschriften.pdf;;;","27/Jan/22 07:45;lzy_1990;I tried this document and found a problem  

Now I can only determine if the Area is a rectangle and use getBounds2D().  Otherwise, use Area  

I can't do it any other way  

 

Thank you for your attention to this issue, thanks~(y);;;","27/Jan/22 19:03;tilman;There is a difference with this file:
https://issues.apache.org/jira/secure/attachment/12678988/gs-bugzilla692826.pdf  (top left)

(and thousands unimportant differences elsewhere)

by using this code
{code}
if (isRectangular(new GeneralPath(clippingPath)))
{
    graphics.setClip(clippingPath.getBounds2D());
}
else
{
    graphics.setClip(clippingPath);
}
{code}
It's really weird, because in theory, there should be no difference. Might be another case of conversion between float and double.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong datatype for OPM in PDExtendedGraphicsState,PDFBOX-5361,13422614,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Fixed,tilman,tilman,tilman,13/Jan/22 19:28,21/Apr/22 15:38,07/May/23 20:06,14/Jan/22 18:50,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.26,3.0.0 PDFBox,,PDModel,,,,0,,,,"/OPM should be an integer, but is a float.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,https://lists.apache.org/thread/9300dxb2ho2m1tj2z1gh60rd43lr69bd,,,,,,,,,,9223372036854775807,,,,Fri Jan 14 17:03:12 UTC 2022,,,,,,,,,,"0|z0ykrs:",9223372036854775807,,,,,,,,,,,,,,,,,,,"13/Jan/22 21:14;lehmi;Sounds like an easy fix, but changing the signature of the getter/setter is a breaking change at least for 2.0.x.  Should we introduce a new getter/setter and deprecate the old ones? Not an elegant solution but without breaking changes.;;;","14/Jan/22 03:44;tilman;My intention is this for 2.0:
{code}
    /**
     * This will set the overprint mode(OPM).
     *
     * @param overprintMode The overprint mode, 0 or 1.
     */
    public void setOverprintMode(Float overprintMode)
    {
        if (overprintMode == null)
        {
            dict.removeItem(COSName.OPM);
        }
        else
        {
            dict.setItem(COSName.OPM, COSInteger.get(overprintMode.intValue()));
        }
    }
{code};;;","14/Jan/22 08:26;lehmi;That's an good idea. It'll fix the datatype written to the pdf and that's the most important thing.

Just one comment from the peanut gallery: why not use {{setInt}} instead of {{setItem}}?;;;","14/Jan/22 16:58;tilman;👍;;;","14/Jan/22 17:01;jira-bot;Commit 1897043 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897043 ]

PDFBOX-5361: OPM is an integer;;;","14/Jan/22 17:03;jira-bot;Commit 1897044 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897044 ]

PDFBOX-5361: OPM is an integer, as pointed out by Gerhard Hiller;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EOFException: Can't read 20 bytes,PDFBOX-5360,13421974,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Fixed,tilman,tilman,tilman,11/Jan/22 13:01,21/Apr/22 15:38,07/May/23 20:06,11/Jan/22 17:48,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.26,3.0.0 PDFBox,,Rendering,,,,0,CCITTFaxDecode,,,"{noformat}
java.io.EOFException: Can't read 20 bytes
    org.apache.pdfbox.filter.CCITTFaxFilter.decode(CCITTFaxFilter.java:77)
    org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.<init>(PDInlineImage.java:90)
    org.apache.pdfbox.contentstream.operator.graphics.BeginInlineImage.process(BeginInlineImage.java:44)
{noformat}
This is a valid tiny inline image (a hyphen in a type 3 font charproc stream) that is 19 bytes long in a file that I can't share. We only need to adjust the pushback.",,,,,,,,,,,,PDFBOX-5057,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Wed Jan 26 19:27:35 UTC 2022,,,,,,,,,,"0|z0ygu0:",9223372036854775807,,,,,,,,,,,,,,,,,,,"11/Jan/22 17:47;jira-bot;Commit 1896920 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896920 ]

PDFBOX-5360: allow streams smaller than 20 bytes;;;","11/Jan/22 17:47;jira-bot;Commit 1896921 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896921 ]

PDFBOX-5360: allow streams smaller than 20 bytes;;;","26/Jan/22 19:27;jira-bot;Commit 1897513 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897513 ]

PDFBOX-5360: add test;;;","26/Jan/22 19:27;jira-bot;Commit 1897514 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897514 ]

PDFBOX-5360: add test;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"PDDocument.importPage throw ""java.util.zip.DataFormatException: invalid code lengths set"" on blank page",PDFBOX-5353,13419738,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Not A Bug,,m.osychenko,m.osychenko,28/Dec/21 15:36,22/Jan/22 13:47,07/May/23 20:06,22/Jan/22 13:47,2.0.25,3.0.0 PDFBox,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,"When import pdf with blank page an exception was thrown and below is the relevant stack trace:
java.util.zip.DataFormatException: invalid code lengths set
java.io.IOException: java.util.zip.DataFormatException: invalid code lengths set
    at org.apache.pdfbox.filter.FlateFilter.decode(FlateFilter.java:58)
    at org.apache.pdfbox.filter.Filter.decode(Filter.java:87)
    at org.apache.pdfbox.cos.COSInputStream.create(COSInputStream.java:83)
    at org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:175)
    at org.apache.pdfbox.cos.COSStream.createInputStream(COSStream.java:169)
    at org.apache.pdfbox.pdmodel.PDPage.getContents(PDPage.java:161)
    at org.apache.pdfbox.pdmodel.PDDocument.importPage(PDDocument.java:678)",,,,,,,,,,,,,"28/Dec/21 15:36;m.osychenko;invalid.pdf;https://issues.apache.org/jira/secure/attachment/13037996/invalid.pdf",,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Tue Dec 28 15:46:06 UTC 2021,,,,,,,,,,"0|z0y328:",9223372036854775807,,,,,,,,,,,,,,,,,,,"28/Dec/21 15:46;tilman;That is not a blank PDF, that is a broken PDF. The page content stream can't be decoded.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ArrayIndexOutOfBoundsException in PDSeparation.tintTransform(),PDFBOX-5352,13419358,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Fixed,tilman,tilman,tilman,24/Dec/21 11:15,21/Apr/22 15:38,07/May/23 20:06,24/Dec/21 11:24,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.26,3.0.0 PDFBox,,Rendering,,,,0,,,,"I get this with the attached file from the linked poppler issue
{noformat}
ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3
    org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.tintTransform(PDSeparation.java:222)
    org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage(PDSeparation.java:169)
    org.apache.pdfbox.pdmodel.graphics.color.PDIndexed.initRgbColorTable(PDIndexed.java:152)
    org.apache.pdfbox.pdmodel.graphics.color.PDIndexed.<init>(PDIndexed.java:93)
    org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create(PDColorSpace.java:188)
{noformat}
The cause is that the range array is too short (7 elements for CMYK).

I'll catch this in the constructor and return an IOException. If there's a complaint then we could change the tintTransform() method so that it takes the minimum of alt.length and result.length.",,,,,,,,,,,,,"24/Dec/21 11:17;tilman;POPPLER-1184.pdf;https://issues.apache.org/jira/secure/attachment/13037917/POPPLER-1184.pdf",,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,https://gitlab.freedesktop.org/poppler/poppler/-/issues/1184,,,,,,,,,,9223372036854775807,,,,Fri Dec 24 13:30:53 UTC 2021,,,,,,,,,,"0|z0y0q0:",9223372036854775807,,,,,,,,,,,,,,,,,,,"24/Dec/21 11:24;jira-bot;Commit 1896350 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896350 ]

PDFBOX-5352: avoid ArrayIndexOutOfBoundsException;;;","24/Dec/21 11:24;jira-bot;Commit 1896351 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896351 ]

PDFBOX-5352: avoid ArrayIndexOutOfBoundsException;;;","24/Dec/21 11:47;jira-bot;Commit 1896352 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896352 ]

PDFBOX-5352: avoid NPE;;;","24/Dec/21 11:47;jira-bot;Commit 1896353 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896353 ]

PDFBOX-5352: avoid NPE;;;","24/Dec/21 13:30;jira-bot;Commit 1896359 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896359 ]

PDFBOX-5352: avoid NPE if base class is called and calls getCOSObject();;;","24/Dec/21 13:30;jira-bot;Commit 1896360 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896360 ]

PDFBOX-5352: avoid NPE if base class is called and calls getCOSObject();;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Splitter: converted PDFs may become big after splitting,PDFBOX-5351,13419244,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Not A Bug,,mjk01,mjk01,23/Dec/21 15:09,06/Jan/22 18:23,07/May/23 20:06,06/Jan/22 18:23,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,"Unfortunately, there are still PDFs for which the Splitter does not work correctly,  i.e. the split documents each have the same (full) size as the original document. At least the following converters have been identified to cause this behaviour:
 * PDFs created via the online PDF converter [https://online2pdf.com/]
 * PDFs created using the PHP library fpdf [http://www.fpdf.org/]

Attached you find a PDF generated using [https://online2pdf.com/].",,,,,,,,,,,,PDFBOX-5317,"23/Dec/21 15:07;mjk01;graustufen_online2pdf.pdf;https://issues.apache.org/jira/secure/attachment/13037887/graustufen_online2pdf.pdf","23/Dec/21 16:16;tilman;screenshot-1.png;https://issues.apache.org/jira/secure/attachment/13037891/screenshot-1.png",,,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Dec 23 16:20:09 UTC 2021,,,,,,,,,,"0|z0y00o:",9223372036854775807,,,,,,,,,,,,,,,,,,,"23/Dec/21 16:17;tilman;This is because each of the 18 pages contains the same list of 18 form XObjects, which itself contains one image.
 !screenshot-1.png! ;;;","23/Dec/21 16:20;tilman;Please submit a feedback to
https://online2pdf.com/feedback
and mention this issue. This is a very inefficient way to create PDFs.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Regression unicode mapping in Korean document,PDFBOX-5350,13418906,Bug,Open,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,,,jwmayfield,jwmayfield,21/Dec/21 21:51,23/Dec/21 04:03,07/May/23 20:06,,2.0.16,2.0.18,2.0.20,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,FontBox,,,,0,regression,,,"The text output from Korean Patent PDFs changed in v2.0.15+ (due to unicode mapping?), this was previously addressed in PDFBOX-4661 and resolved that example PDF in v2.0.18 - thanks. Unfortunately v2.0.18 causes other documents (included here) to now have incorrect text output.

PDFTextStripper stripper = new PDFTextStripper();
PDDocument doc = PDDocument.load(new File(""KR1019980000128.pdf""));
stripper.getText(doc);

Like in PDFBOX-4661 there are numerous warnings of the form:

WARNING: No Unicode mapping for CID+14172 (14172) in font GKYPPJ+GulimChe

I've attached the text dump of two versions, but in brief:

2.0.15: 공개번호 (public number)

2.0.25: 공개 

I only confirmed the issue in the versions listed above but presume the issue persists >=2.0.18.

My reading of PDFBOX-4661 is there is something funky about these PDFs? PDFBOX v2.0.15 had the correct text output. Testing in PDF.js incorrectly produces 공개뮈픸 so I can see there is something non-trivial here.

Any help is much appreciated.",,,,,,,,,,,,PDFBOX-4661,"21/Dec/21 21:29;jwmayfield;KR1019900015076.pdf;https://issues.apache.org/jira/secure/attachment/13037808/KR1019900015076.pdf","21/Dec/21 21:29;jwmayfield;KR1019980000128.pdf;https://issues.apache.org/jira/secure/attachment/13037810/KR1019980000128.pdf","21/Dec/21 21:40;jwmayfield;KR1019980000128_2_0_15.txt;https://issues.apache.org/jira/secure/attachment/13037807/KR1019980000128_2_0_15.txt","21/Dec/21 21:40;jwmayfield;KR1019980000128_2_0_25.txt;https://issues.apache.org/jira/secure/attachment/13037806/KR1019980000128_2_0_25.txt","21/Dec/21 21:29;jwmayfield;KR1020140140600.pdf;https://issues.apache.org/jira/secure/attachment/13037809/KR1020140140600.pdf",,,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Thu Dec 23 04:02:53 UTC 2021,,,,,,,,,,"0|z0xxy0:",9223372036854775807,,,,,,,,,,,,,,,,,,,"23/Dec/21 04:02;tilman;One difference that is easy to see is on the top, after the ""(11)"".

The first one is
번 which is BC88, or EB B2 88 in utf8
https://www.unicodery.com/BC88.html

might be this line
{noformat}
<2d2c><2dc9><bbf8>
{noformat}

per the specification (see attached issue) this does not include bcXX . However Adobe extracts it.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
A list of bugs found （70 bugs in total),PDFBOX-5339,13416558,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Minor,Fixed,,Zander Huang,Zander Huang,10/Dec/21 11:52,08/Jul/22 06:36,07/May/23 20:06,05/Mar/22 03:32,2.0.25,3.0.0 PDFBox,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.26,3.0.0 PDFBox,,,,,,0,,,,"1. Unique Bugs Found
Recently we (Zhang Cen [https://github.com/occia], Huang Wenjie [https://github.com/ZanderHuang] and Zhang Xiaohan [https://github.com/Han0nly]) discovered a series of bugs in latest pdfbox (3.0.0-alpha2).
Every bug we reported in the following is unique and reproducable. Furthermore, they have been manually analyzed and triaged in removing the duplicates.
Due to the lack of contextual knowledge in the pdfbox library, we cannot thoroughly fix some bugs hence we look forward to any proposed plan from the developers in fixing these bugs.

2. Bug Report and Crash Seeds
The bug report folder can be downloaded from [https://drive.google.com/drive/folders/1TMOzudQOVXPKdZ1--NyusyV7kHRA2MSE?usp=sharing]
It contains both reports and crash seeds.

3. Test Program to Reproduce Crashes
The test program can be downloaded from [https://drive.google.com/file/d/1r0OsDC0vg8Qc-XtGg0XDKbxubaPozcBj/view?usp=sharing]

Total 70 bugs are reported in this issue.
A full list is provided below.

4. Folder structure
 - Level 1 (folder): exception type
 - Level 2 (folder): error location
 - Level 3 (files): POC file and report.txt including reproducing steps

5. report.txt content:
      1. Exception type
      2. Error location
      3. Bug cause and impact
      4. Crash thread's stacks
      5. Steps to reproduce

 

6. Bug full list (crashes under java.lang.IllegalArgumentException and IllegalStateException should be wrapped instead of using the common exception types)

pdfbox_reported_crashes
├── java.lang.ArrayIndexOutOfBoundsException
│   ├─= org.apache.fontbox.cff.CFFParser.readString--CFFParser.java-781
│   ├─= org.apache.fontbox.cff.Type1CharString.seac--Type1CharString.java-484
│   ├─= org.apache.fontbox.ttf.HorizontalMetricsTable.getAdvanceWidth--HorizontalMetricsTable.java-113
│   ├─= org.apache.pdfbox.filter.CCITTFaxDecoderStream.decode2D--CCITTFaxDecoderStream.java-218
│   └─= org.apache.pdfbox.pdfparser.PDFXrefStreamParser=ObjectNumbers.<init>--PDFXrefStreamParser.java-202
├── java.lang.ClassCastException
│   ├─= org.apache.fontbox.cff.CFFParser.parseType1Dicts--CFFParser.java-765
│   ├─= org.apache.fontbox.cmap.CMapParser.parseBeginbfrange--CMapParser.java-377
│   ├─= org.apache.pdfbox.contentstream.operator.text.SetTextLeading.process--SetTextLeading.java-37
│   ├─= org.apache.pdfbox.pdmodel.font.PDFont.getAverageFontWidth--PDFont.java-402
│   ├─= org.apache.pdfbox.pdmodel.font.PDType1CFont.<init>--PDType1CFont.java-101
│   └─= org.apache.pdfbox.util.Matrix.<init>--Matrix.java-70
├── java.lang.IllegalArgumentException
│   ├─= org.apache.fontbox.cff.CFFParser=DictData=Entry.getBoolean--CFFParser.java-1247
│   ├─= org.apache.fontbox.cff.CFFParser.readCharset--CFFParser.java-1042
│   ├─= org.apache.fontbox.cff.CFFParser.readEncoding--CFFParser.java-808
│   ├─= org.apache.fontbox.cff.Type1CharString.callothersubr--Type1CharString.java-383
│   ├─= org.apache.fontbox.cff.Type1CharString.handleType1Command--Type1CharString.java-319
│   ├─= org.apache.pdfbox.cos.COSObjectKey.<init>--COSObjectKey.java-54
│   ├─= org.apache.pdfbox.cos.COSObjectKey.<init>--COSObjectKey.java-58
│   ├─= org.apache.pdfbox.pdmodel.font.PDFontFactory.createDescendantFont--PDFontFactory.java-128
│   ├─= org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont--PDFontFactory.java-100
│   ├─= org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont--PDFontFactory.java-104
│   ├─= org.apache.pdfbox.pdmodel.font.PDType1Font.<init>--PDType1Font.java-202
│   └── org.apache.pdfbox.util.Matrix.checkFloatValues--Matrix.java-300
├── java.lang.IllegalStateException
│   ├─= org.apache.fontbox.cff.CFFCharsetCID.getSIDForGID--CFFCharsetCID.java-59
│   └─= org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType--PDPageTree.java-261
├── java.lang.IndexOutOfBoundsException
│   ├─= org.apache.fontbox.cff.CFFParser=DictData=Entry.getNumber--CFFParser.java-1229
│   ├─= org.apache.fontbox.cff.Type1CharString.handleType1Command--Type1CharString.java-292
│   ├─= org.apache.fontbox.cff.Type2CharString.handleType2Command--Type2CharString.java-146
│   ├─= org.apache.fontbox.util.BoundingBox.<init>--BoundingBox.java-65
│   ├─= org.apache.pdfbox.contentstream.operator.text.SetTextLeading.process--SetTextLeading.java-37
│   └─= org.apache.pdfbox.cos.COSArray.getObject--COSArray.java-205
├── java.lang.NegativeArraySizeException
│   └─= org.apache.pdfbox.pdfparser.PDFXrefStreamParser.parse--PDFXrefStreamParser.java-123
├── java.lang.NullPointerException
│   ├─= org.apache.fontbox.cff.CFFParser.parseFont--CFFParser.java-486
│   ├─= org.apache.fontbox.cff.CFFParser.readString--CFFParser.java-779
│   ├─= org.apache.fontbox.cmap.CMap.toInt--CMap.java-207
│   ├─= org.apache.fontbox.type1.Token.intValue--Token.java-107
│   ├─= org.apache.fontbox.type1.Type1Parser.parseASCII--Type1Parser.java-125
│   ├─= org.apache.fontbox.type1.Type1Parser.parseBinary--Type1Parser.java-530
│   ├─= org.apache.fontbox.type1.Type1Parser.readEncoding--Type1Parser.java-210
│   ├─= org.apache.fontbox.type1.Type1Parser.readOtherSubrs--Type1Parser.java-714
│   ├─= org.apache.fontbox.type1.Type1Parser.readPostScriptWrapper--Type1Parser.java-423
│   ├─= org.apache.fontbox.type1.Type1Parser.readProc--Type1Parser.java-458
│   ├─= org.apache.fontbox.type1.Type1Parser.readProcVoid--Type1Parser.java-492
│   ├─= org.apache.fontbox.type1.Type1Parser.read--Type1Parser.java-852
│   ├─= org.apache.pdfbox.pdmodel.encryption.PDEncryption.getFilter--PDEncryption.java-159
│   ├─? org.apache.pdfbox.pdmodel.font.PDSimpleFont.getStandard14Width--PDSimpleFont.java-327
│   ├─= org.apache.pdfbox.pdmodel.font.PDTrueTypeFont.codeToGID--PDTrueTypeFont.java-549
│   ├─= org.apache.pdfbox.pdmodel.font.PDType1CFont.codeToName--PDType1CFont.java-270
│   ├─= org.apache.pdfbox.pdmodel.font.PDType1Font.codeToName--PDType1Font.java-552
│   ├─= org.apache.pdfbox.pdmodel.font.PDType3Font.generateBoundingBox--PDType3Font.java-321
│   ├─= org.apache.pdfbox.pdmodel.font.PDType3Font.generateBoundingBox--PDType3Font.java-334
│   └─= org.apache.pdfbox.pdmodel.font.PDType3Font.getCharProc--PDType3Font.java-373
├── java.lang.NumberFormatException
│   ├─= org.apache.fontbox.cmap.CMapParser.parseNextToken--CMapParser.java-657
│   ├─= org.apache.fontbox.cmap.CMapParser.parseNextToken--CMapParser.java-661
│   ├─= org.apache.fontbox.type1.Token.floatValue--Token.java-112
│   ├─= org.apache.fontbox.type1.Token.intValue--Token.java-107
│   └─= org.apache.fontbox.type1.Type1Lexer.tryReadNumber--Type1Lexer.java-337
├── java.lang.StackOverflowError
│   ├─= org.apache.pdfbox.cos.COSDictionary.getCOSArray--COSDictionary.java-593
│   ├─= org.apache.pdfbox.cos.COSDictionary.getDictionaryObject--COSDictionary.java-178
│   ├─= org.apache.pdfbox.cos.COSName.equals--COSName.java-738
│   ├─? org.apache.pdfbox.io.RandomAccessReadBuffer.read--RandomAccessReadBuffer.java-217
│   ├─= org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8--BaseParser.java-788
│   ├─= org.apache.pdfbox.pdmodel.PDPageTree.getKids--PDPageTree.java-156
│   ├─= org.apache.pdfbox.util.SmallMap.findKey--SmallMap.java-67
│   └─= org.apache.pdfbox.util.SmallMap.get--SmallMap.java-126
└── java.nio.BufferUnderflowException
    ├─= org.apache.fontbox.type1.Type1Lexer.getChar--Type1Lexer.java-93
    └─= org.apache.fontbox.type1.Type1Lexer.readCharString--Type1Lexer.java-472
    
 7. Crashes under IllegalArgumentException and IllegalStateException types

A couple of crashes are found under IllegalArgumentException and IllegalStateException. These exceptions are caught and thrown by Pdfbox and they are not bugs but non standard way of handling exceptions.  
It will be better to standardize it by creating an exception wrapping for the intended exceptions.

 

Any further discussion for these vulnerabilities including fix is welcomed and look forward to hearing from you.",,,,,,,,,,PDFBOX-5468,,,"23/Dec/21 11:58;tilman;crash-4698e0dc7833a3f959d06707e01d03cda52a83f4;https://issues.apache.org/jira/secure/attachment/13037873/crash-4698e0dc7833a3f959d06707e01d03cda52a83f4",,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,java,Thu Apr 07 06:16:24 UTC 2022,,,,,,,,,,"0|z0xjy0:",9223372036854775807,,,,,,,,,,,,,,,,,,,"10/Dec/21 12:20;tilman;Thanks, that is an impressive list.;;;","10/Dec/21 14:55;tilman;I've created an issue in twelvemonkeys so that they can fix it as well. I tried my own fix but will take theirs if it is different.;;;","10/Dec/21 15:29;jira-bot;Commit 1895782 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1895782 ]

PDFBOX-5339: avoid IndexOutOfBoundsException;;;","10/Dec/21 15:47;jira-bot;Commit 1895783 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1895783 ]

PDFBOX-5339: avoid IndexOutOfBoundsException;;;","10/Dec/21 15:48;jira-bot;Commit 1895784 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1895784 ]

PDFBOX-5339: add javadoc;;;","10/Dec/21 15:51;tilman;The good thing is, one can just feed the POC files into PDFDebugger and have the exception 😂;;;","10/Dec/21 17:13;Zander Huang;I just added a point 7 in case you miss it out.
Please feel free to contact me at [wenjiezander@gmail.com|mailto:wenjiezander@gmail.com] if there is any issue.

Thanks.;;;","11/Dec/21 03:33;jira-bot;Commit 1895799 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1895799 ]

PDFBOX-5339: add IOException;;;","11/Dec/21 04:14;jira-bot;Commit 1895800 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1895800 ]

PDFBOX-5339: catch IOException;;;","11/Dec/21 04:16;jira-bot;Commit 1895801 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1895801 ]

PDFBOX-5339: remove accidental change;;;","11/Dec/21 04:28;jira-bot;Commit 1895803 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1895803 ]

PDFBOX-5339: add IOException;;;","11/Dec/21 13:31;jira-bot;Commit 1895811 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1895811 ]

PDFBOX-5339: avoid IndexOutOfBoundsException;;;","11/Dec/21 13:31;jira-bot;Commit 1895812 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1895812 ]

PDFBOX-5339: avoid IndexOutOfBoundsException;;;","11/Dec/21 13:37;tilman;I didn't find the poc crash-d9c256f9d7ec8ca3e6611b20c7755efd47b65cd3 for the CFFParser.java:1229 exception but it was obvious from the source code.;;;","11/Dec/21 18:49;jira-bot;Commit 1895815 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1895815 ]

PDFBOX-5339: AAIOBE now wrapped in IOException, copying twelvemonkeys commit by Harald Kuhr;;;","11/Dec/21 18:50;jira-bot;Commit 1895816 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1895816 ]

PDFBOX-5339: AAIOBE now wrapped in IOException, copying twelvemonkeys commit by Harald Kuhr;;;","12/Dec/21 04:22;jira-bot;Commit 1895824 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1895824 ]

PDFBOX-5339: avoid ClassCastException;;;","12/Dec/21 04:22;jira-bot;Commit 1895825 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1895825 ]

PDFBOX-5339: avoid ClassCastException;;;","12/Dec/21 05:28;jira-bot;Commit 1895827 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1895827 ]

PDFBOX-5339: avoid IllegalArgumentException;;;","12/Dec/21 05:28;jira-bot;Commit 1895828 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1895828 ]

PDFBOX-5339: avoid IllegalArgumentException;;;","12/Dec/21 08:33;jira-bot;Commit 1895831 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1895831 ]

PDFBOX-5339: avoid IllegalArgumentException;;;","12/Dec/21 08:33;jira-bot;Commit 1895832 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1895832 ]

PDFBOX-5339: avoid IllegalArgumentException;;;","12/Dec/21 16:47;Zander Huang;[~tilman] I just realized the poc.tar.gz file that contains crash-d9c256f9d7ec8ca3e6611b20c7755efd47b65cd3 poc file for the CFFParser.java:1229 exception has been flagged for abuse and is not visible.
You can download it from the link below.
https://www.dropbox.com/s/r3qvngh1atxozc5/pocs.tar.gz?dl=0;;;","20/Dec/21 03:53;jira-bot;Commit 1896174 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896174 ]

PDFBOX-5339: avoid NullPointerException;;;","20/Dec/21 03:53;jira-bot;Commit 1896175 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896175 ]

PDFBOX-5339: avoid NullPointerException;;;","20/Dec/21 03:55;tilman;poc 
crash-6fc2da32d385df34bf1115ce64877847d0b223e6
crash-cc6d434165ff6f4ee835e5568f8ca94b3f2090b2
crash-d562e0c1aec20922e0a319613ae5290e53b33b78
crash-a6af0c9291800ee37dafba9d755301b927fa721d
crash-ef35c58169818325316964a0f88cfb4c8224e514
crash-048c797be4af07e7ba80af31132be80579df0475
crash-3a81cc03d0ad9cf42a2deb602974be8dc30f0f9d
crash-9f635279caa0b3fcfded8b7a0a02e7176c41b7b2
are missing;;;","20/Dec/21 10:19;jira-bot;Commit 1896181 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896181 ]

PDFBOX-5339: avoid IllegalArgumentException;;;","20/Dec/21 10:19;jira-bot;Commit 1896182 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896182 ]

PDFBOX-5339: avoid IllegalArgumentException;;;","20/Dec/21 13:18;jira-bot;Commit 1896185 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896185 ]

PDFBOX-5339: avoid IllegalArgumentException;;;","20/Dec/21 13:18;jira-bot;Commit 1896186 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896186 ]

PDFBOX-5339: avoid IllegalArgumentException;;;","20/Dec/21 13:29;jira-bot;Commit 1896188 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896188 ]

PDFBOX-5339: avoid IllegalArgumentException;;;","20/Dec/21 13:29;jira-bot;Commit 1896189 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896189 ]

PDFBOX-5339: avoid IllegalArgumentException;;;","23/Dec/21 12:02;jira-bot;Commit 1896309 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896309 ]

PDFBOX-5339: avoid ArrayIndexOutOfBoundsException;;;","23/Dec/21 12:02;jira-bot;Commit 1896310 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896310 ]

PDFBOX-5339: avoid ArrayIndexOutOfBoundsException;;;","24/Dec/21 03:41;tilman;I made a bug report ([JDK-8279257|https://bugs.openjdk.java.net/browse/JDK-8279257]) about the ArrayIndexOutOfBoundsException
{code}
import java.awt.geom.GeneralPath;

public class NewClass
{
    public static void main(String[] args)
    {
        GeneralPath path = createPath();
        path.append(path.getPathIterator(null), true);
    }

    static GeneralPath createPath()
    {
        GeneralPath path = new GeneralPath();
        path.moveTo(150.0, 524.0);
        path.lineTo(67.0, 524.0);
        path.closePath();
        return path;
    }
}
{code}
;;;","24/Dec/21 11:10;jira-bot;Commit 1896346 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896346 ]

PDFBOX-5339: avoid ArrayIndexOutOfBoundsException;;;","24/Dec/21 11:10;jira-bot;Commit 1896347 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896347 ]

PDFBOX-5339: avoid ArrayIndexOutOfBoundsException;;;","24/Dec/21 12:56;jira-bot;Commit 1896357 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896357 ]

PDFBOX-5339: read encoding from font if encoding is an invalid object;;;","24/Dec/21 12:57;jira-bot;Commit 1896358 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896358 ]

PDFBOX-5339: read encoding from font if encoding is an invalid object;;;","24/Dec/21 16:45;jira-bot;Commit 1896365 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896365 ]

PDFBOX-5339: add null check, throw IOException instead;;;","24/Dec/21 16:46;jira-bot;Commit 1896366 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896366 ]

PDFBOX-5339: add null check, throw IOException instead;;;","25/Dec/21 14:52;jira-bot;Commit 1896387 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896387 ]

PDFBOX-5339: avoid ClassCastException;;;","25/Dec/21 14:52;jira-bot;Commit 1896388 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896388 ]

PDFBOX-5339: avoid ClassCastException;;;","25/Dec/21 15:07;jira-bot;Commit 1896389 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896389 ]

PDFBOX-5339: avoid NullPointerException;;;","25/Dec/21 15:07;jira-bot;Commit 1896390 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896390 ]

PDFBOX-5339: avoid NullPointerException;;;","25/Dec/21 15:10;jira-bot;Commit 1896391 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896391 ]

PDFBOX-5339: avoid ClassCastException;;;","25/Dec/21 15:10;jira-bot;Commit 1896392 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896392 ]

PDFBOX-5339: avoid ClassCastException;;;","26/Dec/21 12:41;jira-bot;Commit 1896420 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896420 ]

PDFBOX-5339: avoid NegativeArraySizeException later if w array contains negative numbers (poc crash-d8df47ab05f8772365355a7d51f27e82ba842a26);;;","26/Dec/21 12:41;jira-bot;Commit 1896421 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896421 ]

PDFBOX-5339: avoid NegativeArraySizeException later if w array contains negative numbers (poc crash-d8df47ab05f8772365355a7d51f27e82ba842a26);;;","26/Dec/21 13:15;jira-bot;Commit 1896422 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896422 ]

PDFBOX-5339: avoid ClassCastException;;;","26/Dec/21 13:16;jira-bot;Commit 1896423 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896423 ]

PDFBOX-5339: avoid ClassCastException;;;","26/Dec/21 13:59;jira-bot;Commit 1896424 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896424 ]

PDFBOX-5339: avoid ClassCastException;;;","26/Dec/21 13:59;jira-bot;Commit 1896425 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896425 ]

PDFBOX-5339: avoid ClassCastException;;;","26/Dec/21 16:14;jira-bot;Commit 1896426 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896426 ]

PDFBOX-5339: avoid IndexOutOfBoundsException;;;","26/Dec/21 16:14;jira-bot;Commit 1896427 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896427 ]

PDFBOX-5339: avoid IndexOutOfBoundsException;;;","26/Dec/21 17:26;jira-bot;Commit 1896429 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896429 ]

PDFBOX-5339: avoid NullPointerException;;;","26/Dec/21 19:08;jira-bot;Commit 1896432 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896432 ]

PDFBOX-5339: avoid IndexOutOfBoundsException;;;","26/Dec/21 19:08;jira-bot;Commit 1896433 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896433 ]

PDFBOX-5339: avoid IndexOutOfBoundsException;;;","27/Dec/21 11:06;jira-bot;Commit 1896445 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896445 ]

PDFBOX-5339: avoid IllegalArgumentException;;;","27/Dec/21 11:06;jira-bot;Commit 1896446 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896446 ]

PDFBOX-5339: avoid IllegalArgumentException;;;","01/Jan/22 16:30;jira-bot;Commit 1896600 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896600 ]

PDFBOX-5339: avoid NullPointerException;;;","01/Jan/22 16:30;jira-bot;Commit 1896601 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896601 ]

PDFBOX-5339: avoid NullPointerException;;;","04/Jan/22 19:26;jira-bot;Commit 1896675 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896675 ]

PDFBOX-5339: add test for ""/"" in type1 font;;;","04/Jan/22 19:27;jira-bot;Commit 1896676 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896676 ]

PDFBOX-5339: add test for ""/"" in type1 font;;;","10/Jan/22 07:07;jira-bot;Commit 1896871 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1896871 ]

PDFBOX-5339: improve error message;;;","10/Jan/22 07:08;jira-bot;Commit 1896872 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1896872 ]

PDFBOX-5339: improve error message;;;","18/Jan/22 11:13;jira-bot;Commit 1897171 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897171 ]

PDFBOX-5339: stop reading dictionaries containing empty COSName entries, most likely they are broken;;;","18/Jan/22 11:14;jira-bot;Commit 1897172 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897172 ]

PDFBOX-5339: stop reading dictionaries containing empty COSName entries, most likely they are broken;;;","18/Jan/22 11:42;msahyoun;[~lehmi] maybe lower the log level to INFO or less from ERROR for your last change as you are recovering from the situation.;;;","18/Jan/22 11:45;jira-bot;Commit 1897173 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897173 ]

PDFBOX-5339: lower debug level;;;","18/Jan/22 11:46;jira-bot;Commit 1897174 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897174 ]

PDFBOX-5339: lower debug level;;;","18/Jan/22 11:48;lehmi;[~msahyoun] thanks for the pointer. You are right ERROR is too much. I've lowered it to WARN, similar to the following messages. It is correct that PDFBox is recovering from that issue but it omits the remaining part of the dictionary in question which might lead to subsequent issues;;;","18/Jan/22 16:25;jira-bot;Commit 1897175 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897175 ]

PDFBOX-5339: check font matrix values before creating a matrix, deprecate problematic constructor;;;","18/Jan/22 16:26;jira-bot;Commit 1897176 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897176 ]

PDFBOX-5339: check font matrix values before creating a matrix, set problematic constructor to private;;;","23/Jan/22 11:43;jira-bot;Commit 1897366 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897366 ]

PDFBOX-5339: avoid NPE with poc crash-0d0c44bd0e2191567466772545138385a2c962a9;;;","23/Jan/22 11:43;jira-bot;Commit 1897367 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897367 ]

PDFBOX-5339: avoid NPE with poc crash-0d0c44bd0e2191567466772545138385a2c962a9;;;","23/Jan/22 13:49;jira-bot;Commit 1897368 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897368 ]

PDFBOX-5339: avoid NumberFormatException;;;","23/Jan/22 13:49;jira-bot;Commit 1897369 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897369 ]

PDFBOX-5339: avoid NumberFormatException;;;","23/Jan/22 14:10;jira-bot;Commit 1897370 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897370 ]

PDFBOX-5339: avoid NumberFormatException;;;","23/Jan/22 14:11;jira-bot;Commit 1897371 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897371 ]

PDFBOX-5339: avoid NumberFormatException;;;","23/Jan/22 15:47;jira-bot;Commit 1897373 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897373 ]

PDFBOX-5339: catch and rethrow NumberFormatException (too many individual occurences in the parser, so lets do it on top);;;","23/Jan/22 15:47;jira-bot;Commit 1897374 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897374 ]

PDFBOX-5339: catch and rethrow NumberFormatException (too many individual occurences in the parser, so lets do it on top);;;","23/Jan/22 16:52;jira-bot;Commit 1897377 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897377 ]

PDFBOX-5339: avoid NullPointerException;;;","23/Jan/22 16:52;jira-bot;Commit 1897378 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897378 ]

PDFBOX-5339: avoid NullPointerException;;;","24/Jan/22 06:23;jira-bot;Commit 1897394 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897394 ]

PDFBOX-5339: avoid NPE, simplify;;;","24/Jan/22 06:23;jira-bot;Commit 1897395 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897395 ]

PDFBOX-5339: avoid NPE, simplify;;;","24/Jan/22 06:29;jira-bot;Commit 1897396 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897396 ]

PDFBOX-5339: avoid NPE;;;","24/Jan/22 06:30;jira-bot;Commit 1897397 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897397 ]

PDFBOX-5339: avoid NPE;;;","25/Jan/22 07:13;jira-bot;Commit 1897437 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897437 ]

PDFBOX-5339: wrap BufferUnderflowException into IOException;;;","25/Jan/22 07:14;jira-bot;Commit 1897438 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897438 ]

PDFBOX-5339: wrap BufferUnderflowException into IOException;;;","25/Jan/22 18:46;jira-bot;Commit 1897465 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897465 ]

PDFBOX-5339: avoid IndexOutOfBoundsException;;;","25/Jan/22 18:46;jira-bot;Commit 1897466 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897466 ]

PDFBOX-5339: avoid IndexOutOfBoundsException;;;","26/Jan/22 06:44;jira-bot;Commit 1897484 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897484 ]

PDFBOX-5339: switch equals operands to avoid a NPE;;;","26/Jan/22 06:46;jira-bot;Commit 1897486 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897486 ]

PDFBOX-5339: switch equals operands to avoid a NPE;;;","26/Jan/22 07:28;jira-bot;Commit 1897487 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897487 ]

PDFBOX-5339: check dictionary type to avoid an IllegalArgumentException;;;","26/Jan/22 07:28;jira-bot;Commit 1897488 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897488 ]

PDFBOX-5339: check dictionary type to avoid an IllegalArgumentException;;;","26/Jan/22 07:36;jira-bot;Commit 1897489 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897489 ]

PDFBOX-5339: be more lenient, replace missing type with the expected type;;;","26/Jan/22 07:36;jira-bot;Commit 1897490 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897490 ]

PDFBOX-5339: be more lenient, replace missing type with the expected type;;;","29/Jan/22 12:22;jira-bot;Commit 1897578 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897578 ]

PDFBOX-5339: split class EmptyCharset into EmptyCharsetCID and EmptzyCharsetType1 to avoid an IllegalStateException;;;","01/Feb/22 07:29;jira-bot;Commit 1897641 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897641 ]

PDFBOX-5339: replace unchecked IllegalArgumentException with IOException;;;","01/Feb/22 07:29;jira-bot;Commit 1897642 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897642 ]

PDFBOX-5339: replace unchecked IllegalArgumentException with IOException;;;","02/Feb/22 07:04;jira-bot;Commit 1897683 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897683 ]

PDFBOX-5339: check object number and generation number for invalid values;;;","02/Feb/22 07:04;jira-bot;Commit 1897684 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897684 ]

PDFBOX-5339: check object number and generation number for invalid values;;;","08/Feb/22 07:19;jira-bot;Commit 1897842 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897842 ]

PDFBOX-5339: avoid recursion and a StackOverflowError, throw an IllegalStateException instead;;;","08/Feb/22 07:19;jira-bot;Commit 1897843 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897843 ]

PDFBOX-5339: avoid recursion and a StackOverflowError, throw an IllegalStateException instead;;;","09/Feb/22 07:04;lehmi;I've fixed the remaining StackOverflowError issues, but now an IllegalStateException is thrown, not the best solution but a better one. We need to do some refactoring to replace the unchecked exception with something else as the affected methods are widely used and don't define any kind of exception to be thrown.;;;","10/Feb/22 07:16;lehmi;The last remaining IOOBE {{org.apache.pdfbox.cos.COSArray.getObject--COSArray.java-205}} doesn't occur any more, it's now an IOException;;;","11/Feb/22 15:59;jira-bot;Commit 1897978 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897978 ]

PDFBOX-5339: add convenience method to avoid NPE;;;","11/Feb/22 15:59;jira-bot;Commit 1897979 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1897979 ]

PDFBOX-5339: add convenience method to avoid NPE;;;","13/Feb/22 11:15;jira-bot;Commit 1898031 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1898031 ]

PDFBOX-5339: avoid AIOOBE and throw an IOException instead;;;","13/Feb/22 11:15;jira-bot;Commit 1898032 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1898032 ]

PDFBOX-5339: avoid AIOOBE and throw an IOException instead;;;","13/Feb/22 18:59;jira-bot;Commit 1898037 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1898037 ]

PDFBOX-5339: fix operator;;;","13/Feb/22 18:59;jira-bot;Commit 1898038 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1898038 ]

PDFBOX-5339: fix operator;;;","14/Feb/22 06:50;jira-bot;Commit 1898046 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1898046 ]

PDFBOX-5339: skip dictionaries with wrong type;;;","14/Feb/22 06:51;jira-bot;Commit 1898047 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1898047 ]

PDFBOX-5339: skip dictionaries with wrong type;;;","05/Mar/22 03:32;tilman;We're done here; the only missing were the ones with ""?"" where we didn't have the poc. The best would be to run the software again, or run the fuzzer again and open a new issue. Thanks for reporting it!;;;","07/Apr/22 06:16;jira-bot;Commit 1899640 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1899640 ]

PDFBOX-5398, PDFBOX-5339: revert changes from 1897171 as they were to strict and led to unwanted parsing issues. This brings back an issue with a really bad pdf which ends up in a StackOverflow;;;","07/Apr/22 06:16;jira-bot;Commit 1899641 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1899641 ]

PDFBOX-5398, PDFBOX-5339: revert changes from 1897171 as they were to strict and led to unwanted parsing issues. This brings back an issue with a really bad pdf which ends up in a StackOverflow;;;"
Not rendered (white) pages for given pdf,PDFBOX-5275,13399127,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Major,Fixed,tilman,Brunarskyi,Brunarskyi,03/Sep/21 09:08,17/Dec/21 06:50,07/May/23 20:06,03/Sep/21 19:20,2.0.20,2.0.24,2.0.25,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.25,3.0.0 PDFBox,,Rendering,,,,0,OCGs,regression,,"Pages 4 & 5 are rendered as empty (white) but all others look good for the following pdf:
[https://www.dropbox.com/s/rc4hdnvj8p5a2bv/pdf_issue_3.pdf?dl=0]


Firefox viewer alow shows it as blank but chrome shows correctly.",,,,,,,,,,,,PDFBOX-4526,"03/Sep/21 18:29;tilman;PDFBOX-5275-p5.pdf;https://issues.apache.org/jira/secure/attachment/13033020/PDFBOX-5275-p5.pdf","03/Sep/21 09:09;Brunarskyi;pdf_issue_34.jpg;https://issues.apache.org/jira/secure/attachment/13032930/pdf_issue_34.jpg",,,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,Java,Fri Sep 03 19:20:14 UTC 2021,,,,,,,,,,"0|z0ukls:",9223372036854775807,,,,,,,,,,,,,,,,,,,"03/Sep/21 18:41;tilman;Worked in 2.0.15, fails since 2.0.16 😭;;;","03/Sep/21 18:56;tilman;It's something with the OCGs... it works if one comments the first line (orange lines appears).
{code}
%/OC /OC0 BDC
/Cs0 cs
.962 .441 .101 scn
/Gs0 gs
0 0 566.929016 34.015999 re
f
EMC
{code}

The bug is in {{PageDrawer.isHiddenOCMD()}}: {{Root/Pages/Kids/[4]/Resources/Properties/OC0}} has an empty OCGs array and this is mishandled, despite that the specification says ""If this entry is not present, is an empty array, or contains references only to null or deleted objects, the membership dictionary shall have no effect on the visibility of any content."";;;","03/Sep/21 19:18;jira-bot;Commit 1892883 from Tilman Hausherr in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1892883 ]

PDFBOX-5275: ignore empty OCGs;;;","03/Sep/21 19:18;jira-bot;Commit 1892884 from Tilman Hausherr in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1892884 ]

PDFBOX-5275: ignore empty OCGs;;;","03/Sep/21 19:20;tilman;Fixed. Thanks for reporting this!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
COSParser: Infinite recursion,PDFBOX-4623,13249155,Bug,Closed,PDFBOX,PDFBox,software,lehmi,The Apache PDFBox® library is an open source Java tool for working with PDF documents. Apache PDFBox is published under the Apache License v2.0.,http://pdfbox.apache.org/,Minor,Fixed,lehmi,apr,apr,06/Aug/19 15:36,21/Apr/22 15:38,07/May/23 20:06,16/Jan/22 12:42,2.0.25,3.0.0 PDFBox,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0.26,3.0.0 PDFBox,,Parsing,,,,0,,,,"Parsing an invalid PDF can lead to an infinite recursion in COSParser, which results in a StackOverflowError.

*Steps to repro*
 # Download malformed PDF (attached)
 # {{Run: java -jar pdfbox-app-2.0.16.jar ExtractText infinite-recursion.pdf}}

*Stacktrace*
{noformat}
Exception in thread ""main"" java.lang.StackOverflowError [1005/1916]
 at java.base/sun.nio.cs.UTF_8.updatePositions(UTF_8.java:79)
 at java.base/sun.nio.cs.UTF_8$Decoder.xflow(UTF_8.java:210)
 at java.base/sun.nio.cs.UTF_8$Decoder.decodeArrayLoop(UTF_8.java:321)
 at java.base/sun.nio.cs.UTF_8$Decoder.decodeLoop(UTF_8.java:414)
 at java.base/java.nio.charset.CharsetDecoder.decode(CharsetDecoder.java:578)
 at java.base/java.nio.charset.CharsetDecoder.decode(CharsetDecoder.java:801)
 at org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8(BaseParser.java:787)
 at org.apache.pdfbox.pdfparser.BaseParser.parseCOSName(BaseParser.java:768)
 at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:887)
 at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue(BaseParser.java:154)
 at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair(BaseParser.java:283)
 at org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary(BaseParser.java:216)
 at org.apache.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:867)
 at org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:912)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:881)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:801)
 at org.apache.pdfbox.pdfparser.COSParser.getLength(COSParser.java:1055)
 at org.apache.pdfbox.pdfparser.COSParser.parseCOSStream(COSParser.java:1114)
 at org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:920)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:881)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:801)
 at org.apache.pdfbox.pdfparser.COSParser.getLength(COSParser.java:1055)
 at org.apache.pdfbox.pdfparser.COSParser.parseCOSStream(COSParser.java:1114)
 at org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:920)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:881)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:801)
 at org.apache.pdfbox.pdfparser.COSParser.getLength(COSParser.java:1055)
 at org.apache.pdfbox.pdfparser.COSParser.parseCOSStream(COSParser.java:1114)
 at org.apache.pdfbox.pdfparser.COSParser.parseFileObject(COSParser.java:920)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:881)
 at org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically(COSParser.java:801)
 at org.apache.pdfbox.pdfparser.COSParser.getLength(COSParser.java:1055)
 at org.apache.pdfbox.pdfparser.COSParser.parseCOSStream(COSParser.java:1114)
 ...
{noformat}
The file was generated by fuzzing and is (probably) not a valid PDF file.

 ","java version ""12"" 2019-03-19
Java(TM) SE Runtime Environment (build 12+33)
Java HotSpot(TM) 64-Bit Server VM (build 12+33, mixed mode, sharing) 

MacOS Mojave",,,,,,,,,,,PDFBOX-5064,"06/Aug/19 15:34;apr;infinite-recursion.pdf;https://issues.apache.org/jira/secure/attachment/12976826/infinite-recursion.pdf","14/Feb/20 18:50;tallison;loop_in_page_tree.pdf;https://issues.apache.org/jira/secure/attachment/12993517/loop_in_page_tree.pdf","14/Dec/20 13:06;tilman;poppler-43279-0.pdf;https://issues.apache.org/jira/secure/attachment/13017050/poppler-43279-0.pdf","14/Dec/20 13:06;tilman;poppler-91414-1.zip-2.gz-53.pdf;https://issues.apache.org/jira/secure/attachment/13017051/poppler-91414-1.zip-2.gz-53.pdf",,,,,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Sun Jan 16 12:25:42 UTC 2022,,,,,,,,,,"0|z05dq0:",9223372036854775807,,,,,,,,,,,,,,,,,,,"06/Aug/19 17:52;tilman;Probably this one 😢
{code}
3 0 obj
<< /Length 3 0 R
   /Filter /FlateDecode
>>
{code}
;;;","14/Feb/20 18:51;tallison;Adding a page tree stackoverflow.;;;","31/Dec/20 12:43;jira-bot;Commit 1884987 from lehmi@apache.org in branch 'pdfbox/trunk'
[ https://svn.apache.org/r1884987 ]

PDFBOX-4623: avoid endless recursion if something went wrong when dereferencing the referenced object;;;","31/Dec/20 12:46;lehmi;I've found a fix for  [^infinite-recursion.pdf].  [^loop_in_page_tree.pdf] and  [^poppler-43279-0.pdf]  need a different fix therefore I've created a new ticket for those issues.  [^poppler-91414-1.zip-2.gz-53.pdf] doesn't trigger an exception at all.

All I said is true for 3.0.0 and I'm afraid there won't be any fix for the 2.0.x-branch.;;;","16/Jan/22 12:16;lehmi;We got another pdf triggering the very same exception in 2.0.x from Jin Wang through the security mailing list.
I had another look at the code and I proofed myself wrong. I've found a solution for 2.0.x. It avoids the stack overflow error and throws an IOException instead.
This is true for  [^infinite-recursion.pdf] ;;;","16/Jan/22 12:25;jira-bot;Commit 1897120 from lehmi@apache.org in branch 'pdfbox/branches/2.0'
[ https://svn.apache.org/r1897120 ]

PDFBOX-4623: mark indirect objects if dereferencing them is in progress to detect a possible recursion and to avoid a stack overflow;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
