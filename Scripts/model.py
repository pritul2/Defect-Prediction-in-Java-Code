# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1db2MQJSQdYV5ghplB2K2D_kyU0Lul-nh
"""

import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import cross_val_score, GridSearchCV
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

# load data from csv files
train_df = pd.read_csv("/content/training.csv")
test_df = pd.read_csv("/content/test.csv")

# remove unnecessary columns
train_df.drop(["Class", "LOC"], inplace=True, axis=1)
test_df.drop(["Class", "Unnamed: 0", "LOC"], inplace=True, axis=1)

# split the data into input and target variables
X_train = train_df.drop("bug", axis=1)
y_train = train_df["bug"]
X_test = test_df.drop("bug", axis=1)
y_test = test_df["bug"]

# perform grid search to optimize the tree's depth
param_grid = {"max_depth": range(1, 11)}
decision_tree = DecisionTreeClassifier(random_state=0)
grid_search = GridSearchCV(decision_tree, param_grid=param_grid, cv=10)
grid_search.fit(X_train, y_train)

# create and train a decision tree model with the best depth found by grid search
decision_tree = grid_search.best_estimator_

# evaluate the model's performance using 10-fold cross-validation
cv_scores = cross_val_score(decision_tree, X_train, y_train, cv=10)
print("Cross-validation scores:", cv_scores)
print("Mean cross-validation score: {:.2f}%".format(cv_scores.mean() * 100))

# make predictions on the test data
y_pred = decision_tree.predict(X_test)

# evaluate the model's performance on the test data
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
confusion = confusion_matrix(y_test, y_pred)

print("Accuracy: {:.2f}%".format(accuracy * 100))
print("Precision: {:.2f}%".format(precision * 100))
print("Recall: {:.2f}%".format(recall * 100))
print("F1 Score: {:.2f}%".format(f1 * 100))
print("Confusion Matrix:\n", confusion)

train_df.corr()

